import math
import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import aiogram.utils.markdown as fmt
import sys
import pathlib
import config as cfg
import markups as nav
from dbshka import Database
from garantDB import GarantDB


class ClientState(StatesGroup):
    START = State()
    GETAUCTIONS = State()
    SETAUCTIONCATEGORY = State()
    SETAUCTIONPRODUCT = State()
    SETAUCTIONDESCRIPTION = State()
    FINSIHCREATEAUCTION = State()
    AUCTIONOWNER = State()
    OFFERRATE = State()
    CHANGESTARTCOST = State()
    AUTOSTART = State()
    DESCRIBEDENY = State()
    BAN = State()
    UNBAN = State()
    BALANCE_USER = State()
    BALANCE_SUMM = State()
    NEWSLETTER = State()
    SORT = State()


storage = MemoryStorage()
bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=storage)
script_dir = pathlib.Path(sys.argv[0]).parent
db = Database(script_dir / cfg.db_file)
garantDB = GarantDB(script_dir / cfg.garantDB_file)

db.create_tables()
garantDB.create_table()


async def delete_msg(message, count):
    for i in range(count):
        try:
            await bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass


async def send_all(users_id, auction_id):
    last_rates = ""
    auction_info = db.get_auction(auction_id)
    for i in range(len(users_id)):
        user_info = db.get_prev_rate(users_id[i])[0]
        last_rates += f'\nüë§–£—á–∞—Å—Ç–Ω–∏–∫ {i + 1}: {user_info if user_info == "–°—Ç–∞–≤–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞‚è±" else user_info + " USDTüí∏"}\n'
    for user_id in users_id:
        user_info_msg = db.get_info_message_id(user_id)[0]
        try:
            await bot.edit_message_text(
                text=f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∞—É–∫—Ü–∏–æ–Ω—É‚úÖ\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_info[6]}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {last_rates}",
                chat_id=user_id,
                message_id=user_info_msg,
            )
        except:
            pass
    try:
        await bot.edit_message_text(
            text=f"–í–∞—à –∞—É–∫—Ü–∏–æ–Ω.\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_info[6]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {last_rates}",
            chat_id=auction_id,
            message_id=db.get_info_message_id(auction_id)[0],
        )
    except:
        pass


def check_category(category):
    category_mass = [
        "–¢–µ–≥–∏",
        "–î–µ—Ñ",
        "–£—Å–ª—É–≥–∏",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "–°–æ—Ñ—Ç",
        "–ë–æ—Ç—ã",
        "–°–∞–π—Ç—ã",
        "–ú–∞–Ω—É–∞–ª—ã",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã",
        "–î—Ä—É–≥–æ–µ",
    ]
    for categ in category_mass:
        if categ == category:
            return True
    return False


async def checkMember(
    userid,
):
    # chat_member = await bot.get_chat_member(cfg.required_chat_id, userid)
    # if chat_member.status == "left":
    #     return False
    return True


def sortAuctions(mass: list, increase):
    if increase == "increase":
        mass.sort(key=lambda x: int(x[5]), reverse=True)
    elif increase == "decrease":
        mass.sort(key=lambda x: int(x[5]))
    return mass


@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    try:
        if message.chat.type == "private":
            await state.update_data(username=message.from_user.username)
            if not await checkMember(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                    reply_markup=nav.channel_url,
                )
                await state.set_state(ClientState.START)
                return
            elif not garantDB.user_exists(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–µüíé",
                    reply_markup=nav.garant_check,
                )
                return
            elif garantDB.check_ban(message.chat.id) == "1":
                await bot.send_message(
                    message.chat.id, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                )
                return
            await bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{message.from_user.username}!üôã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä—å –ø–µ—Ä–≤–æ–≥–æ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏.\n\nüíé–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ - –¥–∞–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∞—Å.\n\nü§ù–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –±–∞–∑–µ —Å–∏—Å—Ç–µ–º—ã <a href='https://t.me/pradagarant_bot'>PRADA | GARANT</a> - —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–±—ã—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º. \n\nüí†–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ <i>@CryptoBot,</i> —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç <b>—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤</b> –∏ –ø–æ–ª–Ω—É—é <b>–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.</b> \n\nüíµ–í—Å–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö <b>(USD)</b>, –∞ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ USDT (TRC20)</b>, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\nü¶æ–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã <b>–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É </b>- @pradaaction_sup. –ú—ã –≤—Å–µ–≥–¥–∞ <b>—Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b> –∏ –≥–æ—Ç–æ–≤—ã <b>—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.</b>\n\nüëâ–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∞–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                parse_mode="html",
                disable_web_page_preview=True,
                reply_markup=nav.menu,
            )
            await state.update_data(auction_id=None)
            balance = garantDB.get_balance(message.chat.id)[0]
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id, float(balance), message.from_user.username)
            db.set_balance(message.chat.id, float(balance))
            await state.update_data(author_id=None)
            await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " start")


@dp.message_handler(commands=["admin"], state=ClientState.all_states)
async def admin(message: types.Message, state: FSMContext):
    if (
        message.chat.id == cfg.glav_admin
        or message.chat.id == cfg.debug_admin
        or message.chat.id == cfg.admin3
    ):
        await bot.send_message(
            message.chat.id,
            f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, {message.from_user.username}",
            reply_markup=nav.admin_panel,
        )


@dp.message_handler(state=ClientState.GETAUCTIONS)
async def getAuctions(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await delete_msg(message, 3)
            await bot.send_message(
                message.chat.id,
                "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é",
                reply_markup=nav.menu,
            )
            return
        # await bot.delete_message(chat_id=chatid, message_id=call.message.message_id)
        # sort_type = call.data[5:]
        # auction_data = await state.get_data()
        # auction_category = auction_data["desired_category"]
        # all_auctions = sortAuctions(all_auctions_unsorted, sort_type)
        chatid = message.chat.id
        desired_category = message.text[:-1]
        await state.update_data(desired_category=desired_category)
        all_auctions = db.get_all_auctions()
        auctions_markup = nav.get_auctions_buttons(all_auctions, desired_category)
        await state.update_data(auctions_list=auctions_markup)
        if auctions_markup == None:
            await bot.send_message(
                chatid,
                "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.‚õîÔ∏è",
                reply_markup=nav.menu,
            )
            await state.set_state(ClientState.START)
            return
        msg = await bot.send_message(
            chatid,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ωüìä",
            reply_markup=auctions_markup,
        )
        await state.update_data(auctions_msg=msg)
        await bot.send_message(chatid, "üèÜ", reply_markup=nav.sort_choose)
        await state.set_state(ClientState.SORT)
    # try:
    #         await bot.delete_message(message.chat.id, message.message_id)
    #         await bot.delete_message(message.chat.id, message.message_id - 1)
    #         await bot.delete_message(message.chat.id, message.message_id - 2)
    #         await state.set_state(ClientState.START)
    #         return
    #     await state.update_data(desired_category=message.text[:-1])
    #     # await bot.send_message(
    #     #     message.chat.id,
    #     #     "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏üìã",
    #     #     reply_markup=nav.sort_choose,
    #     # )
    except Exception as e:
        print(e, "get auctions")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SORT)
async def setAuctionCategory(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await delete_msg(message, 2)
            await bot.send_message(
                message.chat.id, "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=nav.menu
            )
            await state.set_state(ClientState.START)
        elif message.text == "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µüìà" or message.text == "–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µüìâ":
            await delete_msg(message, 1)
            if message.text == "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µüìà":
                sort_type = "increase"
            else:
                sort_type = "decrease"
            state_data = await state.get_data()
            auction_message = state_data["auctions_msg"]
            category = state_data["desired_category"]
            all_auctions = db.get_all_auctions()
            sorted_auctions = sortAuctions(all_auctions, sort_type)
            sorted_markup = nav.get_auctions_buttons(sorted_auctions, category)
            try:
                await delete_msg(auction_message, 1)
                await bot.send_message(
                    message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ωüìä",
                    reply_markup=sorted_markup,
                )
                # await bot.edit_message_reply_markup(
                #     chat_id=message.chat.id,
                #     message_id=auction_message.message_id,
                #     reply_markup=sorted_markup,
                # )
            except:
                pass
    except Exception as e:
        print(e, "get auctions")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SETAUCTIONCATEGORY)
async def setAuctionCategory(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await bot.send_message(
                chat_id=message.chat.id,
                text="–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é",
                reply_markup=nav.menu,
            )
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.delete_message(message.chat.id, message.message_id - 2)
            await state.set_state(ClientState.START)
            return
        auctionCategory = message.text[:-1]
        if not check_category(auctionCategory):
            await bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–πüìã",
                reply_markup=nav.categor,
            )
            return
        await state.update_data(product_category=auctionCategory)
        await bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞üì¶",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_2")
            ),
        )
        await state.set_state(ClientState.SETAUCTIONPRODUCT)
    except Exception as e:
        print(e, "set category")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SETAUCTIONPRODUCT)
async def setAuctionProduct(message: types.Message, state: FSMContext):
    try:
        productName = message.text
        await state.update_data(product_name=productName)
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞üìù")
        await state.set_state(ClientState.SETAUCTIONDESCRIPTION)
    except Exception as e:
        print(e, "set product")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SETAUCTIONDESCRIPTION)
async def setAuctionProduct(message: types.Message, state: FSMContext):
    try:
        product_description = message.text
        await state.update_data(product_description=product_description)
        await bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞üí∏",
        )
        await state.set_state(ClientState.FINSIHCREATEAUCTION)
    except Exception as e:
        print(e, " set description")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.FINSIHCREATEAUCTION)
async def createAuction(message: types.Message, state: FSMContext):
    try:
        try:
            product_cost = int(message.text)
        except:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
        auction_data = await state.get_data()
        product_category = auction_data["product_category"]
        product_name = auction_data["product_name"]
        product_description = auction_data["product_description"]
        db.add_auction(
            message.chat.id,
            product_name,
            product_cost,
            product_category,
            product_description,
        )
        db.set_auction_status(message.chat.id, "check")
        await state.update_data(auction_owner=message.chat.id)
        await bot.send_message(
            message.chat.id,
            "–í–∞—à –∞—É–∫—Ü–∏–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç.",
            reply_markup=nav.hide,
        )
        await bot.send_message(message.chat.id, "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=nav.menu)
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, "finish create auction")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.AUTOSTART)
async def autoStart(message: types.Message, state: FSMContext):
    try:
        try:
            members_number = int(message.text)
        except:
            await bot.send_message(message.chat.id, "‚õîÔ∏è–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
            return
        if db.get_auction(message.chat.id)[6] == "active":
            await bot.send_message("‚õîÔ∏è–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–∞—á–∞—Ç")
        elif members_number < 2:
            await bot.send_message(
                message.chat.id, "‚õîÔ∏è–ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!"
            )
        elif members_number < int(db.get_auction_members(message.chat.id)[0]):
            await bot.send_message(
                message.chat.id,
                f"üë•–í –≤–∞—à–µ–º –∞—É–∫—Ü–∏–æ–Ω–µ {db.get_auction_members(message.chat.id)[0]} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. \n\n üîî–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–≤—Ç–æ —Å—Ç–∞—Ä—Ç–∞",
            )
        else:
            db.set_autostart(message.chat.id, members_number)
            await bot.send_message(message.chat.id, "–ê–≤—Ç–æ —Å—Ç–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚úÖ")
            await state.set_state(ClientState.START)

    except Exception as e:
        print(e, " auto start")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CHANGESTARTCOST)
async def changeStartCost(message: types.Message, state: FSMContext):
    try:
        new_start_cost = int(message.text)
        db.set_start_cost(message.chat.id, new_start_cost)
        members_id = db.get_members_id(message.chat.id)[0].split("/")
        auction_info = db.get_auction(message.chat.id)
        for member in members_id:
            if not member == "":
                await bot.send_message(
                    int(member),
                    f'üõé–ë—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: ‚Ññ{auction_info[0]}\nüì¶–¢–æ–≤–∞—Ä: {auction_info[4]}\n{"üíµ–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞" if auction_info[6] == "inactive" else "üí≤–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞"} : {auction_info[2] if auction_info[6] == "inactive" else auction_info[5]}\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}\nüì¢–°—Ç–∞—Ç—É—Å: {auction_info[6]}',
                    reply_markup=nav.member_actions,
                )
        await bot.send_message(message.chat.id, "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞‚úÖ")
    except Exception as e:
        print(e, "change start cost")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.DESCRIBEDENY)
async def describeDeny(message: types.Message, state: FSMContext):
    try:
        describe = message.text
        state_data = await state.get_data()
        auction_owner = state_data["auction_owner"]
        await bot.send_message(
            auction_owner,
            f"–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n{describe}",
            reply_markup=nav.hide,
        )
        db.del_auction(auction_owner)
        await delete_msg(message, 2)
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " describe deny")
        await bot.send_message(cfg.glav_admin, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.OFFERRATE)
async def offerRate(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await bot.delete_message(message.message_id)
            await bot.delete_message(message.message_id - 1)
            return
        offer = int(message.text)
        user_info = db.get_user(message.chat.id)
        state_data = await state.get_data()
        author_id = state_data["auction_id"]
        auction_info = db.get_auction(author_id)
        if offer > user_info[1]:
            await bot.send_message(
                message.chat.id,
                f"–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_info[1]}‚õîÔ∏è",
            )
        elif offer <= auction_info[5]:
            await bot.send_message(
                message.chat.id, "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π.‚õîÔ∏è"
            )
        else:
            members_id = db.get_members_id(author_id)[0].split("/")
            members_id.pop(0)
            db.set_prev_rate(message.chat.id, offer)
            # await send_all(members_id, author_id)
            for member in members_id:
                if not member == "":
                    await bot.send_message(
                        int(member),
                        f"–°—Ç–∞–≤–∫–∞ –ø–æ–¥–Ω—è—Ç–∞ –¥–æ {offer}‚úÖ",
                        reply_markup=nav.member_actions,
                    )
            await bot.send_message(
                author_id,
                f"–°—Ç–∞–≤–∫–∞ –ø–æ–¥–Ω—è—Ç–∞ –¥–æ {offer}‚úÖ",
                reply_markup=nav.accept_offer(message.chat.id),
            )
            db.set_current_cost(author_id, offer)
    except Exception as e:
        print(e, "offer rate")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


# @dp.message_handler(state=ClientState.ADMINDELETE)
# async def adminDelete(message: types.Message, state: FSMContext):
#     try:
#         user_info = db.get_user_from_nick(message.text)
#         if user_info == None:
#             await bot.send_message(
#                 message.chat.id,
#                 "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
#                 reply_markup=nav.cancel_admin_del,
#             )
#             return
#         userid = user_info[0]
#         if not db.check_active_auction(userid):
#             await bot.send_message(
#                 message.chat.id,
#                 "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
#                 reply_markup=nav.cancel_admin_del,
#             )
#             return
#         members_id = db.get_members_id(userid)[0].split("/")
#         db.del_auction(userid)
#         for member in members_id:
#             if not member == "":
#                 await bot.send_message(
#                     int(member),
#                     "–ê—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω. –ú–æ–∂–Ω–æ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—èüóë",
#                     reply_markup=nav.del_auction,
#                 )
#         await bot.delete_message(message.chat.id, message.message_id)
#         await bot.delete_message(message.chat.id, message.message_id - 1)
#         await bot.send_message(
#             userid, "–í–∞—à –∞—É–∫—Ü–∏–æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º‚úÖ", reply_markup=nav.menu
#         )
#         await state.set_state(ClientState.START)
#     except Exception as e:
#         print(e, "admin delete")
#         await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.NEWSLETTER)
async def balanceUser(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        info = db.get_all_users()
        await bot.send_message(message.chat.id, text="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
        for i in range(len(info)):
            try:
                time.sleep(1)
                await bot.send_message(info[i][0], str(message.text))
            except:
                pass
        await bot.send_message(message.chat.id, text="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " newsletter")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.BALANCE_USER)
async def balanceUser(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        user = db.get_user_from_nick(message.text)
        if user == None:
            await bot.send_message(
                message.chat.id,
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã',
            )
            return
        await state.update_data(edit_balance_user=user)
        await bot.send_message(
            message.chat.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]}\n–ë–∞–ª–∞–Ω—Å: {user[1]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        )
        await state.set_state(ClientState.BALANCE_SUMM)
    except Exception as e:
        print(e, " balance user")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.BALANCE_SUMM)
async def balanceSumm(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        try:
            new_balance = int(message.text)
        except:
            await bot.send_message(
                message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã'
            )
            return
        state_data = await state.get_data()
        user = state_data["edit_balance_user"]
        db.set_balance(user[0], new_balance)
        garantDB.set_balance(user[0], new_balance)
        await bot.send_message(
            message.chat.id, "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=nav.hide
        )
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " balance summ")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.BAN)
async def ban(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        user = db.get_user_from_nick(message.text)
        if user == None:
            await bot.send_message(
                message.chat.id,
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã',
            )
            return
        garantDB.ban(user[0])
        await bot.send_message(
            message.chat.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} –∑–∞–±–∞–Ω–µ–Ω.",
            reply_markup=nav.hide,
        )
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " ban")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


# @dp.message_handler(state=ClientState.UNBAN)
# async def ban(message: types.Message, state: FSMContext):
#     try:
#         await delete_msg(message, 2)
#         if message.text == "-":
#             await state.set_state(ClientState.START)
#             return
#         user = db.get_user_from_nick(message.text)
#         if user == None:
#             await bot.send_message(
#                 message.chat.id,
#                 '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã',
#             )
#             return
#         garantDB.unban(user[0])
#         await bot.send_message(
#             message.chat.id,
#             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} —Ä–∞–∑–±–∞–Ω–µ–Ω.",
#             reply_markup=nav.hide,
#         )
#         await state.set_state(ClientState.START)
#     except Exception as e:
#         print(e, " unban")
#         await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(content_types=["text"], state=ClientState.all_states)
async def writeText(message: types.Message, state: FSMContext):
    chatid = message.chat.id
    if not await checkMember(message.chat.id):
        await bot.send_message(
            message.chat.id,
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=nav.channel_url,
        )
        await state.set_state(ClientState.START)
        return
    if garantDB.check_ban(chatid) == "1":
        await bot.send_message(chatid, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.")
        return
    if message.text == "–°–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ ‚öñÔ∏è":
        try:
            state_data = await state.get_data()
            author_id = state_data["auction_id"]
            if db.check_active_auction(chatid) or not author_id == None:
                await bot.send_message(
                    chatid, "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã!‚õîÔ∏è"
                )
                return
            await bot.send_message(
                chatid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=nav.categor
            )
            await state.set_state(ClientState.GETAUCTIONS)
        except Exception as e:
            print(e, " get auctions")
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
    elif message.text == "–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω üíé":
        try:
            state_data = await state.get_data()
            author_id = state_data["auction_id"]
            if db.check_active_auction(chatid):
                await bot.send_message(chatid, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω!‚õîÔ∏è")
                return
            if not author_id == None:
                await bot.send_message(
                    chatid, "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã!‚õîÔ∏è"
                )
                return
            await bot.send_message(
                chatid,
                "üóÉ –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞—à —Ç–æ–≤–∞—Ä?",
                reply_markup=nav.categor,
            )
            await state.set_state(ClientState.SETAUCTIONCATEGORY)
        except Exception as e:
            print(e, " create auction")
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
    elif message.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–≤–æ–µ–º—É –∞—É–∫—Ü–∏–æ–Ω—É üîì":
        try:
            if db.check_active_auction(chatid):
                await bot.send_message(
                    chatid,
                    "–í–∞—à –∞—É–∫—Ü–∏–æ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤üë•",
                    reply_markup=nav.owner_actions,
                )
            else:
                await bot.send_message(chatid, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞‚õîÔ∏è")
        except Exception as e:
            print(e)
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
    elif message.text == "–û –Ω–∞—Åüåü":
        deals_number = garantDB.getOffersNumber()
        gm_deals_number = deals_number["g-m"]
        a_deals_number = deals_number["a"]
        deals_summ = garantDB.getOffersSumm()
        gm_deals_summ = math.ceil(deals_summ["g-m"])
        a_deals_summ = math.ceil(deals_summ["a"])
        await bot.send_message(
            chatid,
            f"–ú—ã - –ø–µ—Ä–≤–æ–µ –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ <b>—Å—Ä–µ–¥—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤</b> –≤–Ω—É—Ç—Ä–∏ –∫–æ–º—å—é–Ω–∏—Ç–∏, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—â–µ–µ –≤–∞–º –ø–æ–ª–Ω—É—é <b>–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.</b> –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º—ã <a href='https://t.me/pradagarant_bot'>PRADA | GARANT</a> –¥–ª—è <b>–≥–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b> –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –±–∞–∑–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã <i>@CryptoBot</i>, –∞ —Å–∞–º–∏ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ <b>USDT (TRC20)</b>, –∞ –∑–Ω–∞—á–∏—Ç –∏ —Ü–µ–Ω–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫ –¥–æ–ª–ª–∞—Ä—É <b>(USD).</b>\n\nü´Ç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≥–∞—Ä–∞–Ω—Ç-–º–∞—Ä–∫–µ—Ç: {gm_deals_number}\nü§ë–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫ –≥–∞—Ä–∞–Ω—Ç-–º–∞—Ä–∫–µ—Ç: {gm_deals_summ} USDT\n\nü´Ç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞: {a_deals_number}\nü§ë–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–∞: {a_deals_summ} USDT",
            parse_mode="html",
            reply_markup=nav.o_nas,
            disable_web_page_preview=True,
        )
    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–∫—Ü–∏–æ–Ω–µüìú":
        try:
            state_data = await state.get_data()
            author_id = (
                chatid if db.check_active_auction(chatid) else state_data["auction_id"]
            )
            auction_info = db.get_auction(author_id)
            last_rates = ""
            users_id = auction_info[7].split("/")
            users_id.pop(0)
            for i in range(len(users_id)):
                user_info = db.get_prev_rate(users_id[i])[0]
                last_rates += f'\n–£—á–∞—Å—Ç–Ω–∏–∫ {i + 1}: {user_info if user_info == "üîî–°—Ç–∞–≤–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞" else user_info + " USDT"}\n'
            msg = await bot.send_message(
                chatid,
                f"üì∞–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞: {auction_info[6]}\n\nüë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}\n\nüí∏–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {last_rates}",
                reply_markup=nav.close_info_message,
            )
            db.set_info_message_id(chatid, msg.message_id)
        except Exception as e:
            print(e)
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.callback_query_handler(state=ClientState.all_states)
async def call_handler(call: types.CallbackQuery, state: FSMContext):
    chatid = call.message.chat.id
    if garantDB.check_ban(chatid) == "1":
        await bot.send_message(chatid, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå")
        return
    try:
        await bot.answer_callback_query(callback_query_id=call.id)
        if call.data == "newsletter":
            await bot.send_message(
                chatid,
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
            )
            await state.set_state(ClientState.NEWSLETTER)
        elif call.data == "edit_balance":
            await bot.send_message(
                chatid,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
            )
            await state.set_state(ClientState.BALANCE_USER)
        elif call.data == "stats":
            await bot.send_message(
                chatid, db.stats(garantDB.getOffersNumber()), reply_markup=nav.hide
            )
        elif call.data == "bor":
            await bot.send_message(
                chatid, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=nav.bor
            )
        elif call.data == "ban":
            await delete_msg(call.message, 1)
            await bot.send_message(
                chatid,
                "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
            )
            await state.set_state(ClientState.BAN)
        elif call.data == "unban":
            await delete_msg(call.message, 1)
            all_banned = garantDB.get_all_banned_users()
            if len(all_banned) == 0:
                await bot.send_message(
                    chatid, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=nav.hide
                )
                return
            for user in all_banned:
                await bot.send_message(
                    chatid,
                    f"–ù–∏–∫: {user[4]}",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{user[0]}"
                        )
                    ),
                )
            await bot.send_message(
                chatid,
                f"–ù–∞–π–¥–µ–Ω–æ {len(all_banned)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                        callback_data=f"hide_users_{len(all_banned)}",
                    )
                ),
            )
        elif "hide_users" in call.data:
            users_count = int(call.data.split("_")[2])
            await delete_msg(call.message, users_count + 1)
        elif "unban" in call.data:
            desired_user = call.data.split("_")[1]
            garantDB.unban(desired_user)
            await bot.edit_message_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω", chatid, call.message.message_id
            )
        elif call.data == "admin_delete":
            all_auctions = db.get_all_auctions()
            if len(all_auctions) == 0:
                await bot.send_message(
                    chatid, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤", reply_markup=nav.hide
                )
                return
            for auction in all_auctions:
                await bot.send_message(
                    chatid,
                    f"–í–ª–∞–¥–µ–ª–µ—Ü: {db.get_user(auction[3])[2]}\n–¢–æ–≤–∞—Ä: {auction[4]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {auction[9]}\n–°—Ç–∞—Ç—É—Å: {auction[6]}\n–°—Ç–∞–≤–∫–∞: {auction[5]}",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "–£–¥–∞–ª–∏—Ç—å", callback_data=f"aremove_auction_{auction[3]}"
                        )
                    ),
                )
            await bot.send_message(
                chatid,
                f"–ù–∞–π–¥–µ–Ω–æ {len(all_auctions)} –∞—É–∫—Ü–∏–æ–Ω–æ–≤",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                        callback_data=f"hide_auctions_{len(all_auctions)}",
                    )
                ),
            )
        elif "hide_auctions" in call.data:
            auction_count = int(call.data.split("_")[2])
            await delete_msg(call.message, auction_count + 1)
        elif call.data == "cancel_admin_del":
            await delete_msg(call.message, 2)
            await state.set_state(ClientState.START)
        elif call.data == "auto_start":
            await bot.send_message(
                chatid,
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–≥–æ —Å—Ç–∞—Ä—Ç–∞üì¢",
            )
            await state.set_state(ClientState.AUTOSTART)
        elif call.data == "back_offer_list":
            await bot.delete_message(chatid, call.message.message_id)
            state_data = await state.get_data()
            await bot.send_message(
                chatid,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ωüìä",
                reply_markup=state_data["auctions_list"],
            )
        elif call.data == "hide":
            await delete_msg(call.message, 1)
        elif call.data == "check_auctions":
            all_auctions = db.get_all_auctions()
            res = True
            for auction in all_auctions:
                if auction[6] == "check":
                    res = False
                    await bot.send_message(
                        chatid,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db.get_user(auction[3])[2]}\n–¢–æ–≤–∞—Ä: {auction[4]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {auction[9]}\n–¶–µ–Ω–∞: {auction[5]}",
                        reply_markup=nav.get_admin_solution_markup(auction[3]),
                    )
            if res:
                await bot.send_message(chatid, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
        elif call.data == "check_member":
            if await checkMember(chatid):
                await bot.delete_message(chatid, call.message.message_id)
                if not garantDB.user_exists(chatid):
                    await bot.send_message(
                        chatid,
                        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–µüíé",
                        reply_markup=nav.garant_check,
                    )
                    return
                elif garantDB.check_ban(chatid) == "1":
                    await bot.send_message(
                        chatid, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                    )
                    return
                state_data = await state.get_data()
                username = state_data["username"]
                await bot.send_message(
                    chatid,
                    f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{username}!üôã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä—å –ø–µ—Ä–≤–æ–≥–æ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏.\n\nüíé–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ - –¥–∞–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∞—Å.\n\nü§ù–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –±–∞–∑–µ —Å–∏—Å—Ç–µ–º—ã <a href='https://t.me/pradagarant_bot'>PRADA | GARANT</a> - —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–±—ã—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º. \n\nüí†–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ <i>@CryptoBot,</i> —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç <b>—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤</b> –∏ –ø–æ–ª–Ω—É—é <b>–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.</b> \n\nüíµ–í—Å–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö <b>(USD)</b>, –∞ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ USDT (TRC20)</b>, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\nü¶æ–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã <b>–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É </b>- @pradaaction_sup. –ú—ã –≤—Å–µ–≥–¥–∞ <b>—Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b> –∏ –≥–æ—Ç–æ–≤—ã <b>—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.</b>\n\nüëâ–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∞–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                    parse_mode="html",
                    disable_web_page_preview=True,
                    reply_markup=nav.menu,
                )
                balance = garantDB.get_balance(call.message.chat.id)[0]
                if not db.user_exists(call.message.chat.id):
                    db.add_user(call.message.chat.id, float(balance), username)
                db.set_balance(call.message.chat.id, float(balance))
                await state.update_data(auction_id=None)
        elif call.data == "check_member_garant":
            if garantDB.user_exists(call.message.chat.id):
                await bot.delete_message(chatid, call.message.message_id)
                if garantDB.check_ban(chatid) == "1":
                    await bot.send_message(
                        chatid, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                    )
                    return
                state_data = await state.get_data()
                username = state_data["username"]
                await bot.send_message(
                    chatid,
                    f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{username}!üôã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä—å –ø–µ—Ä–≤–æ–≥–æ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏.\n\nüíé–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ - –¥–∞–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∞—Å.\n\nü§ù–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –±–∞–∑–µ —Å–∏—Å—Ç–µ–º—ã <a href='https://t.me/pradagarant_bot'>PRADA | GARANT</a> - —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–±—ã—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º. \n\nüí†–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ <i>@CryptoBot,</i> —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç <b>—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤</b> –∏ –ø–æ–ª–Ω—É—é <b>–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.</b> \n\nüíµ–í—Å–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö <b>(USD)</b>, –∞ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ USDT (TRC20)</b>, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\nü¶æ–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã <b>–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É </b>- @pradaaction_sup. –ú—ã –≤—Å–µ–≥–¥–∞ <b>—Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b> –∏ –≥–æ—Ç–æ–≤—ã <b>—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.</b>\n\nüëâ–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∞–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                    parse_mode="html",
                    disable_web_page_preview=True,
                    reply_markup=nav.menu,
                )
                balance = garantDB.get_balance(chatid)[0]
                if not db.user_exists(chatid):
                    db.add_user(chatid, float(balance), username)
                db.set_balance(chatid, float(balance))
        elif "remove_auction" in call.data:
            if call.data[0] == "a":
                chatid = call.data[16:]
            try:
                members_id = db.get_members_id(chatid)[0].split("/")
                db.del_auction(chatid)
                for member in members_id:
                    if not member == "":
                        await bot.send_message(
                            int(member),
                            "–ê—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω. –ú–æ–∂–Ω–æ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—èüóë",
                            reply_markup=nav.del_auction,
                        )
                if call.data[0] == "a":
                    await delete_msg(call.message, 1)
                else:
                    await delete_msg(call.message, 2)
                await bot.send_message(
                    chatid, "–ê—É–∫—Ü–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ", reply_markup=nav.menu
                )
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "move" in call.data:
            await delete_msg(call.message, 1)
            await bot.send_message(chatid, "–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìã", reply_markup=nav.menu)
            await state.set_state(ClientState.START)
        elif "close" in call.data:
            await delete_msg(call.message, 2)
        elif "start_cost" in call.data:
            try:
                auction_info = db.get_auction(chatid)
                if auction_info[2] < auction_info[5]:
                    await bot.send_message(
                        chatid, "–£–∂–µ –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É‚õîÔ∏è"
                    )
                    return
                await bot.send_message(
                    chatid,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—Éüíµ",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_1")
                    ),
                )
                await state.set_state(ClientState.CHANGESTARTCOST)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "back" in call.data:
            try:
                await bot.delete_message(chatid, call.message.message_id)
                if call.data[-1] == "2":
                    await bot.delete_message(chatid, call.message.message_id - 1)
                    await bot.send_message(chatid, "üèÜ", reply_markup=nav.menu)
                await state.set_state(ClientState.START)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "acceptproduct" in call.data:
            auction_owner = call.data[14:]
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            db.set_auction_status(auction_owner, "inactive")
            await bot.send_message(
                auction_owner,
                "–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚úÖ",
                reply_markup=nav.owner_actions,
            )
            await bot.send_message(
                auction_owner, "–û–∂–∏–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚è±", reply_markup=nav.get_auction_info
            )
        elif "denyproduct" in call.data:
            await state.update_data(auction_owner=call.data[12:])
            await bot.delete_message(cfg.glav_admin, call.message.message_id)
            await bot.send_message(cfg.glav_admin, "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")
            await state.set_state(ClientState.DESCRIBEDENY)
        elif "enter_auction" in call.data:
            try:
                author_id = int(call.data[13:])
                db.change_members(author_id, 1)
                auction_info = db.get_auction(author_id)
                current_members_id = db.get_members_id(author_id)[0]
                new_members_id = current_members_id + "/" + str(chatid)
                db.set_members_id(author_id, new_members_id)
                db.set_prev_rate(chatid, "–°—Ç–∞–≤–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞")
                await bot.send_message(
                    author_id,
                    f"–ö –≤–∞—à–µ–º—É –∞—É–∫—Ü–∏–æ–Ω—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {db.get_auction_members(author_id)[0]} üë•",
                )
                last_rates = ""
                members_list = []
                if not current_members_id == "":
                    members_list = current_members_id.split("/")
                    members_list.pop(0)
                    for i in range(len(members_list)):
                        user_info = db.get_prev_rate(members_list[i])[0]
                        last_rates += f'–£—á–∞—Å—Ç–Ω–∏–∫ {i + 1}: {user_info if user_info == "–°—Ç–∞–≤–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞" else user_info + " USDT"}\n'
                # await send_all(members_list, author_id)
                await bot.send_message(
                    chatid,
                    f'–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∞—É–∫—Ü–∏–æ–Ω—É ‚Ññ{auction_info[0]}\nüì¶–¢–æ–≤–∞—Ä: {auction_info[4]}\n{"üíµ–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞" if auction_info[6] == "inactive" else "üí≤–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞"} : {auction_info[2] if auction_info[6] == "inactive" else auction_info[5]}\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}',
                    reply_markup=nav.member_actions,
                )
                await bot.send_message(
                    chatid,
                    "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞",
                    reply_markup=nav.get_auction_info,
                )
                if int(db.get_auction_members(author_id)[0]) == int(
                    db.get_autostart(author_id)[0]
                ):
                    db.set_auction_status(author_id, "active")
                    await bot.send_message(
                        author_id,
                        "–°—Ä–∞–±–æ—Ç–∞–ª –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç–∞–≤–∫–∏",
                    )
                    for member in new_members_id.split("/"):
                        if not member == "":
                            try:
                                await bot.send_message(
                                    int(member),
                                    "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞—Ç. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç–∞–≤–∫–∏‚úÖ",
                                    reply_markup=nav.member_actions,
                                )
                            except:
                                pass

                await state.update_data(auction_id=author_id)
            except Exception as e:
                print(e, e.args, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.‚õîÔ∏è")
        elif "leave_auction" in call.data:
            try:
                state_data = await state.get_data()
                author_id = state_data["auction_id"]
                await bot.send_message(
                    chatid, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞‚≠ïÔ∏è", reply_markup=nav.menu
                )
                await state.update_data(auction_id=None)
                db.change_members(author_id, -1)
                current_members_id = db.get_members_id(author_id)[0]
                replace_member_id = "/" + str(chatid)
                new_members_id = current_members_id.replace(replace_member_id, "")
                db.set_members_id(author_id, new_members_id)
                members_id = new_members_id.split("/")
                members_id.pop(0)
                # await send_all(members_id, author_id)
                await bot.send_message(
                    author_id,
                    f"–£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞. –ö–æ–ª–∏—á—Å–µ—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {db.get_auction_members(author_id)[0]} üë•",
                )
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "offer_rate" in call.data:
            try:
                gbalance = garantDB.get_balance(chatid)[0]
                db.set_balance(chatid, float(gbalance))
                state_data = await state.get_data()
                author_id = state_data["auction_id"]
                if db.get_auction(author_id)[6] == "inactive":
                    await bot.send_message(chatid, "–ê—É–∫—Ü–∏–æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç‚õîÔ∏è")
                else:
                    await bot.send_message(
                        chatid,
                        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: 1 USDT. –í–∞—à –±–∞–ª–∞–Ω—Å: {db.get_user(chatid)[1]} USDTüíµ",
                    )
                    await state.set_state(ClientState.OFFERRATE)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "start_auction" in call.data:
            try:
                if db.get_auction_members(chatid)[0] > 1:
                    if db.get_auction(chatid)[6] == "active":
                        await bot.send_message(chatid, "–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–∞—á–∞—Ç‚õîÔ∏è")
                        return
                    db.set_auction_status(chatid, "active")
                    await bot.send_message(
                        chatid, "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞—Ç. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏‚úÖ"
                    )
                    members_id = db.get_members_id(chatid)[0].split("/")
                    members_id.pop(0)
                    # await send_all(members_id, chatid)
                    for member in members_id:
                        if not member == "":
                            await bot.send_message(
                                int(member),
                                "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞—Ç. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç–∞–≤–∫–∏‚úÖ",
                                reply_markup=nav.member_actions,
                            )
                else:
                    await bot.send_message(
                        chatid,
                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 2 –∏ –±–æ–ª–µ–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚õîÔ∏è",
                    )
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.‚õîÔ∏è")
        elif "return" in call.data:
            await bot.send_message(chatid, "–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìã", reply_markup=nav.menu)
            await state.update_data(author_id=None)
        elif "accept_offer" in call.data:
            try:
                author_id = int(call.data[12:])
                members_id = db.get_members_id(chatid)[0].split("/")
                auction_info = db.get_auction(chatid)
                user_info = db.get_user(author_id)
                offer_link = (
                    f"offer {db.get_user(chatid)[0]} {user_info[0]} {auction_info[5]} a"
                )
                if not str(author_id) in auction_info[7]:
                    await bot.send_message(
                        chatid, "–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∞—É–∫—Ü–∏–æ–Ω. –ï–≥–æ —Å—Ç–∞–≤–∫–∞ –∞–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞"
                    )
                    return
                await bot.send_message(
                    author_id,
                    f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {auction_info[5]} USDT. –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–¥–µ–ª–∫—É –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç–µ‚úÖ",
                    reply_markup=nav.del_auction,
                )
                await bot.send_message(
                    chatid,
                    f"–í–∞—à –∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å—Ç–∞–≤–∫–µ {auction_info[5]} USDTüíµ\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—à–µ–º—É –≥–∞—Ä–∞–Ω—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏: `{nav.code_link(offer_link.encode())}`",
                    parse_mode="MARKDOWN",
                    reply_markup=nav.del_auction,
                )
                await state.set_state(ClientState.START)
                db.del_auction(chatid)
                for member in members_id:
                    if not member == "" and not int(member) == author_id:
                        await bot.send_message(
                            int(member),
                            "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è‚åõÔ∏è",
                            reply_markup=nav.del_auction,
                        )
            except Exception as e:
                print(e)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "detail" in call.data:
            await bot.delete_message(chat_id=chatid, message_id=call.message.message_id)
            auction = db.get_auction(int(call.data[7:]))
            await bot.send_message(
                chatid,
                f'–ê—É–∫—Ü–∏–æ–Ω: ‚Ññ{auction[0]}\nüì¶–¢–æ–≤–∞—Ä: {auction[4]}\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {auction[9]}\n{"üíµ–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞" if auction[6] == "inactive" else "üí≤–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞"} : {auction[2] if auction[6] == "inactive" else auction[5]}\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction[1]}\nüì¢–°—Ç–∞—Ç—É—Å: {auction[6]} ',
                reply_markup=nav.get_auction_offer(auction[3]),
            )
    except Exception as e:
        print(e, call.data)
        await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler()
async def non_start(message: types.Message, state: FSMContext):
    try:
        if message.chat.type == "private":
            await state.update_data(username=message.from_user.username)
            if not await checkMember(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                    reply_markup=nav.channel_url,
                )
                await state.set_state(ClientState.START)
                return
            elif not garantDB.user_exists(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–µüíé",
                    reply_markup=nav.garant_check,
                )
                return
            elif garantDB.check_ban(message.chat.id) == "1":
                await bot.send_message(
                    message.chat.id, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                )
                return
            await bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{message.from_user.username}!üôã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä—å –ø–µ—Ä–≤–æ–≥–æ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏.\n\nüíé–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ç–æ–≤–∞—Ä –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ - –¥–∞–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤–∞—Å.\n\nü§ù–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –±–∞–∑–µ —Å–∏—Å—Ç–µ–º—ã <a href='https://t.me/pradagarant_bot'>PRADA | GARANT</a> - —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–±—ã—Ç—å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º. \n\nüí†–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ <i>@CryptoBot,</i> —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç <b>—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤</b> –∏ –ø–æ–ª–Ω—É—é <b>–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.</b> \n\nüíµ–í—Å–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö <b>(USD)</b>, –∞ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ USDT (TRC20)</b>, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\nü¶æ–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã <b>–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É </b>- @pradaaction_sup. –ú—ã –≤—Å–µ–≥–¥–∞ <b>—Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b> –∏ –≥–æ—Ç–æ–≤—ã <b>—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.</b>\n\nüëâ–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∞–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                parse_mode="html",
                disable_web_page_preview=True,
                reply_markup=nav.menu,
            )
            await state.update_data(auction_id=None)
            balance = garantDB.get_balance(message.chat.id)[0]
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id, float(balance), message.from_user.username)
            db.set_balance(message.chat.id, float(balance))
            await state.update_data(author_id=None)
            await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " start 2")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
