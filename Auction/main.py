from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import sys
import pathlib
import config as cfg
import markups as nav
from dbshka import Database
from garantDB import GarantDB


class ClientState(StatesGroup):
    START = State()
    GETAUCTIONS = State()
    SETAUCTIONCATEGORY = State()
    SETAUCTIONPRODUCT = State()
    FINSIHCREATEAUCTION = State()
    AUCTIONOWNER = State()
    OFFERRATE = State()
    CHANGESTARTCOST = State()


storage = MemoryStorage()
bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=storage)
script_dir = pathlib.Path(sys.argv[0]).parent
db = Database(script_dir / cfg.db_file)
garantDB = GarantDB(script_dir / cfg.garantDB_file)

db.create_tables()
garantDB.create_table()


def sortAuctions(mass: list, increase):
    if increase == "increase":
        mass.sort(key=lambda x: int(x[5]), reverse=True)
    elif increase == "decrease":
        mass.sort(key=lambda x: int(x[5]))
    return mass


@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    try:
        if message.chat.type == "private":
            if not garantDB.user_exists(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–µüíé",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–∞üíé",
                            url="https://t.me/pradagarantbot",
                        )
                    ),
                )
                return
            elif garantDB.check_ban(message.chat.id) == "1":
                await bot.send_message(
                    message.chat.id, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                )
                return
            await bot.send_message(
                message.chat.id,
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username} ‚úÖ\n\nPRADA AUCTION - –ø–µ—Ä–≤—ã–π –ø–æ–¥–æ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤–æ –≤—Å–µ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ üíé\n\n–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å —Ü–µ–Ω–æ–π —Ç–æ–≤–∞—Ä–∞? üí∏\n–£ –≤–∞—Å –µ—Å—Ç—å —á—Ç–æ —Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ? üóÉÔ∏è\n\n–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–∫—Ü–∏–æ–Ω, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µüåê\n\nüèÜPRADA EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏üèÜ",
                reply_markup=nav.menu,
            )
            await state.update_data(auction_id=None)
            balance = garantDB.get_balance(message.chat.id)[0]
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id, float(balance), message.from_user.username)
            db.set_balance(message.chat.id, float(balance))
            await state.update_data(author_id=None)
            current_state = await state.get_state()
            if current_state == None:
                await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " start")


@dp.message_handler(state=ClientState.GETAUCTIONS)
async def getAuctions(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await bot.send_message(
                message.chat.id,
                "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–æ –∞–±—É–±–∞ –±—É–±–∞–±",
                reply_markup=nav.menu,
            )
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.delete_message(message.chat.id, message.message_id - 2)
            await bot.delete_message(message.chat.id, message.message_id - 3)
            await state.set_state(ClientState.START)
            return
        await state.update_data(desired_category=message.text[:-1])
        await bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", reply_markup=nav.sort_choose
        )
    except Exception as e:
        print(e, "get auctions")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SETAUCTIONCATEGORY)
async def setAuctionCategory(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await bot.send_message(
                chat_id=message.chat.id,
                text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–æ –∞–±—É–±–∞ –±—É–±–∞–±",
                reply_markup=nav.menu,
            )
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.delete_message(message.chat.id, message.message_id - 1)
            await bot.delete_message(message.chat.id, message.message_id - 2)
            await bot.delete_message(message.chat.id, message.message_id - 3)
            await state.set_state(ClientState.START)
            return
        auctionCategory = message.text[:-1]
        await state.update_data(product_category=auctionCategory)
        await bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞üì¶",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_2")
            ),
        )
        await state.set_state(ClientState.SETAUCTIONPRODUCT)
    except Exception as e:
        print(e, "set category")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SETAUCTIONPRODUCT)
async def setAuctionProduct(message: types.Message, state: FSMContext):
    try:
        productName = message.text
        await state.update_data(product_name=productName)
        await bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_2")
            ),
        )
        await state.set_state(ClientState.FINSIHCREATEAUCTION)
    except Exception as e:
        print(e, "set product")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.FINSIHCREATEAUCTION)
async def createAuction(message: types.Message, state: FSMContext):
    try:
        product_cost = int(message.text)
        auction_data = await state.get_data()
        product_category = auction_data["product_category"]
        product_name = auction_data["product_name"]
        db.add_auction(message.chat.id, product_name, product_cost, product_category)
        await bot.send_message(
            message.chat.id,
            "–ê—É–∫—Ü–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚úÖ",
            reply_markup=nav.owner_actions,
        )
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, "finish create auction")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CHANGESTARTCOST)
async def changeStartCost(message: types.Message, state: FSMContext):
    try:
        new_start_cost = int(message.text)
        db.set_start_cost(message.chat.id, new_start_cost)
        members_id = db.get_members_id(message.chat.id)[0].split("/")
        auction_info = db.get_auction(message.chat.id)
        for member in members_id:
            if not member == "":
                await bot.send_message(
                    int(member),
                    f'üõé–ë—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: ‚Ññ{auction_info[0]}\nüì¶–¢–æ–≤–∞—Ä: {auction_info[4]}\n{"üíµ–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞" if auction_info[6] == "inactive" else "üí≤–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞"} : {auction_info[2] if auction_info[6] == "inactive" else auction_info[5]}\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}\nüì¢–°—Ç–∞—Ç—É—Å: {auction_info[6]}',
                    reply_markup=nav.member_actions,
                )
        await bot.send_message(message.chat.id, "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞‚úÖ")
    except Exception as e:
        print(e, "change start cost")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.OFFERRATE)
async def offerRate(message: types.Message, state: FSMContext):
    try:
        if message.text == "–ù–∞–∑–∞–¥":
            await bot.delete_message(message.message_id)
            await bot.delete_message(message.message_id - 1)
            return
        offer = int(message.text)
        user_info = db.get_user(message.chat.id)
        state_data = await state.get_data()
        author_id = state_data["auction_id"]
        auction_info = db.get_auction(author_id)
        if offer > user_info[1]:
            await bot.send_message(
                message.chat.id,
                f"–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–∞–Ω—Å–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_info[1]}‚õîÔ∏è",
            )
        elif offer <= auction_info[5]:
            await bot.send_message(
                message.chat.id, "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π.‚õîÔ∏è"
            )
        else:
            members_id = db.get_members_id(author_id)[0].split("/")
            for member in members_id:
                if not member == "":
                    await bot.send_message(
                        int(member),
                        f"–°—Ç–∞–≤–∫–∞ –ø–æ–¥–Ω—è—Ç–∞ –¥–æ {offer}‚úÖ",
                        reply_markup=nav.member_actions,
                    )
            await bot.send_message(
                author_id,
                f"–°—Ç–∞–≤–∫–∞ –ø–æ–¥–Ω—è—Ç–∞ –¥–æ {offer}‚úÖ",
                reply_markup=nav.accept_offer(message.chat.id),
            )
            db.set_current_cost(author_id, offer)
    except Exception as e:
        print(e, "offer rate")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(content_types=["text"], state=ClientState.all_states)
async def writeText(message: types.Message, state: FSMContext):
    chatid = message.chat.id
    if garantDB.check_ban(chatid) == "1":
        await bot.send_message(chatid, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.")
        return
    if message.text == "–°–ø–∏—Å–æ–∫ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ ‚öñÔ∏è":
        try:
            state_data = await state.get_data()
            author_id = state_data["auction_id"]
            if db.check_active_auction(chatid) or not author_id == None:
                await bot.send_message(
                    chatid, "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã!‚õîÔ∏è"
                )
                return
            await bot.send_message(
                chatid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=nav.categor
            )
            await state.set_state(ClientState.GETAUCTIONS)
        except Exception as e:
            print(e, " get auctions")
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
    elif message.text == "–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω üíé":
        try:
            state_data = await state.get_data()
            author_id = state_data["auction_id"]
            if db.check_active_auction(chatid):
                await bot.send_message(chatid, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω!‚õîÔ∏è")
                return
            if not author_id == None:
                await bot.send_message(
                    chatid, "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã!‚õîÔ∏è"
                )
                return
            await bot.send_message(
                chatid,
                "–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞—à —Ç–æ–≤–∞—Ä?",
                reply_markup=nav.categor,
            )
            await state.set_state(ClientState.SETAUCTIONCATEGORY)
        except Exception as e:
            print(e, " create auction")
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
    elif message.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–≤–æ–µ–º—É –∞—É–∫—Ü–∏–æ–Ω—É üîì":
        try:
            if db.check_active_auction(chatid):
                await bot.send_message(
                    chatid,
                    "–í–∞—à –∞—É–∫—Ü–∏–æ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤üë•",
                    reply_markup=nav.owner_actions,
                )
            else:
                await bot.send_message(chatid, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞‚õîÔ∏è")
        except Exception as e:
            print(e)
            await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.callback_query_handler(state=ClientState.all_states)
async def call_handler(call: types.CallbackQuery, state: FSMContext):
    chatid = call.message.chat.id
    try:
        await bot.answer_callback_query(callback_query_id=call.id)
        if "get_auctions" in call.data:
            try:
                state_data = await state.get_data()
                author_id = state_data["auction_id"]
                if db.check_active_auction(chatid) or not author_id == None:
                    await bot.send_message(
                        chatid, "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã!‚õîÔ∏è"
                    )
                    return
                await bot.send_message(
                    chatid, "–í—ã—é–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", reply_markup=nav.sort_choose
                )
            except Exception as e:
                print(e, " get auctions")
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "sort" in call.data:
            await bot.delete_message(chat_id=chatid, message_id=call.message.message_id)
            sort_type = call.data[5:]
            auction_data = await state.get_data()
            auction_category = auction_data["desired_category"]
            all_auctions_unsorted = db.get_all_auctions()
            all_auctions = sortAuctions(all_auctions_unsorted, sort_type)
            auctions_markup = nav.get_auctions_buttons(all_auctions, auction_category)
            await state.update_data(auctions_list=auctions_markup)
            if auctions_markup == None:
                await bot.send_message(
                    chatid,
                    "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.‚õîÔ∏è",
                    reply_markup=nav.menu,
                )
                await state.set_state(ClientState.START)
                return
            await bot.send_message(
                chatid,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ω",
                reply_markup=auctions_markup,
            )
            await bot.send_message(chatid, "üèÜ", reply_markup=nav.menu)
            await state.set_state(ClientState.START)
        elif "back_offer_list" in call.data:
            await bot.delete_message(chatid, call.message.message_id)
            state_data = await state.get_data()
            await bot.send_message(
                chatid,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ω",
                reply_markup=state_data["auctions_list"],
            )
        elif "create_auction" in call.data:
            try:
                state_data = await state.get_data()
                author_id = state_data["auction_id"]
                if db.check_active_auction(chatid):
                    await bot.send_message(chatid, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω!‚õîÔ∏è")
                    return
                if not author_id == None:
                    await bot.send_message(
                        chatid, "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤—Å–µ –∞—É–∫—Ü–∏–æ–Ω—ã!‚õîÔ∏è"
                    )
                    return
                await bot.send_message(
                    chatid,
                    "–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞—à —Ç–æ–≤–∞—Ä?",
                    reply_markup=nav.categor,
                )
                await state.set_state(ClientState.SETAUCTIONCATEGORY)
            except Exception as e:
                print(e)
        elif "my_auction" in call.data:
            if db.check_active_auction(chatid):
                current_state = await state.get_state()
                await bot.send_message(
                    chatid,
                    "–í–∞—à –∞—É–∫—Ü–∏–æ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤üë•",
                    reply_markup=nav.owner_actions,
                )
            else:
                await bot.send_message(chatid, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞‚õîÔ∏è")
        elif "remove_auction" in call.data:
            try:
                members_id = db.get_members_id(chatid)[0].split("/")
                db.del_auction(chatid)
                for member in members_id:
                    if not member == "":
                        await bot.send_message(
                            int(member),
                            "–ê—É–∫—Ü–∏–æ–Ω —É–¥–∞–ª–µ–Ω. –ú–æ–∂–Ω–æ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—èüóë",
                            reply_markup=nav.del_auction,
                        )
                await bot.delete_message(chatid, call.message.message_id)
                await bot.delete_message(chatid, call.message.message_id - 1)
                await bot.send_message(
                    chatid, "–ê—É–∫—Ü–∏–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ", reply_markup=nav.menu
                )
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "start_cost" in call.data:
            try:
                auction_info = db.get_auction(chatid)
                if auction_info[2] < auction_info[5]:
                    await bot.send_message(
                        chatid, "–£–∂–µ –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É‚õîÔ∏è"
                    )
                    return
                await bot.send_message(
                    chatid,
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—Éüíµ",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_1")
                    ),
                )
                await state.set_state(ClientState.CHANGESTARTCOST)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "back" in call.data:
            try:
                await bot.delete_message(chatid, call.message.message_id)
                if call.data[-1] == "2":
                    await bot.delete_message(chatid, call.message.message_id - 1)
                    await bot.send_message("üèÜ", reply_markup=nav.menu)
                await state.set_state(ClientState.START)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")

        elif "enter_auction" in call.data:
            try:
                author_id = int(call.data[13:])
                db.change_members(author_id, 1)
                auction_info = db.get_auction(author_id)
                current_members_id = db.get_members_id(author_id)[0]
                new_members_id = current_members_id + "/" + str(chatid)
                db.set_members_id(author_id, new_members_id)
                await bot.send_message(
                    author_id,
                    f"–ö –≤–∞—à–µ–º—É –∞—É–∫—Ü–∏–æ–Ω—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {db.get_auction_members(author_id)[0]} üë•",
                )
                await bot.send_message(
                    chatid,
                    f'–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∞—É–∫—Ü–∏–æ–Ω—É ‚Ññ{auction_info[0]}\nüì¶–¢–æ–≤–∞—Ä: {auction_info[4]}\n{"üíµ–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞" if auction_info[6] == "inactive" else "üí≤–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞"} : {auction_info[2] if auction_info[6] == "inactive" else auction_info[5]}\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction_info[1]}',
                    reply_markup=nav.member_actions,
                )
                await state.update_data(auction_id=author_id)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.‚õîÔ∏è")
        elif "leave_auction" in call.data:
            try:
                state_data = await state.get_data()
                author_id = state_data["auction_id"]
                await bot.send_message(
                    chatid, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞‚≠ïÔ∏è", reply_markup=nav.action_choose
                )
                await state.update_data(auction_id=None)
                db.change_members(author_id, -1)
                current_members_id = db.get_members_id(author_id)[0]
                replace_member_id = "/" + str(chatid)
                new_members_id = current_members_id.replace(replace_member_id, "")
                db.set_members_id(author_id, new_members_id)
                await bot.send_message(
                    author_id,
                    f"–£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ –∞—É–∫—Ü–∏–æ–Ω–∞. –ö–æ–ª–∏—á—Å–µ—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {db.get_auction_members(author_id)[0]} üë•",
                )
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "offer_rate" in call.data:
            try:
                gbalance = garantDB.get_balance(chatid)[0]
                db.set_balance(chatid, float(gbalance))
                state_data = await state.get_data()
                author_id = state_data["auction_id"]
                if db.get_auction(author_id)[6] == "inactive":
                    await bot.send_message(chatid, "–ê—É–∫—Ü–∏–æ–Ω –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç‚õîÔ∏è")
                else:
                    await bot.send_message(
                        chatid,
                        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥: 1 USDT. –í–∞—à –±–∞–ª–∞–Ω—Å: {db.get_user(chatid)[1]} USDTüíµ",
                    )
                    await state.set_state(ClientState.OFFERRATE)
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "start_auction" in call.data:
            try:
                if db.get_auction_members(chatid)[0] > 1:
                    if db.get_auction(chatid)[6] == "active":
                        await bot.send_message(chatid, "–ê—É–∫—Ü–∏–æ–Ω —É–∂–µ –Ω–∞—á–∞—Ç‚õîÔ∏è")
                        return
                    db.set_auction_status(chatid, "active")
                    await bot.send_message(
                        chatid, "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞—Ç. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏‚úÖ"
                    )
                    members_id = db.get_members_id(chatid)[0].split("/")
                    for member in members_id:
                        if not member == "":
                            await bot.send_message(
                                int(member),
                                "–ê—É–∫—Ü–∏–æ–Ω –Ω–∞—á–∞—Ç. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å—Ç–∞–≤–∫–∏‚úÖ",
                                reply_markup=nav.member_actions,
                            )
                else:
                    await bot.send_message(
                        chatid,
                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ 2 –∏ –±–æ–ª–µ–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤‚õîÔ∏è",
                    )
            except Exception as e:
                print(e, call.data)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.‚õîÔ∏è")
        elif "return" in call.data:
            await bot.send_message(
                chatid, "–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìã", reply_markup=nav.action_choose
            )
            await state.update_data(author_id=None)
        elif "accept_offer" in call.data:
            try:
                author_id = int(call.data[12:])
                members_id = db.get_members_id(chatid)[0].split("/")
                auction_info = db.get_auction(chatid)
                user_info = db.get_user(author_id)
                offer_link = f"offer {db.get_user(chatid)[0]} {user_info[0]} {auction_info[5]} seller-customer"
                await bot.send_message(
                    author_id,
                    f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {auction_info[5]} USDT. –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å–¥–µ–ª–∫—É –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç–µ‚úÖ",
                    reply_markup=nav.del_auction,
                )
                await bot.send_message(
                    chatid,
                    f"–í–∞—à –∞—É–∫—Ü–∏–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å—Ç–∞–≤–∫–µ {auction_info[5]} USDTüíµ\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—à–µ–º—É –≥–∞—Ä–∞–Ω—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏: `{nav.code_link(offer_link.encode())}`",
                    parse_mode="MARKDOWN",
                    reply_markup=nav.del_auction,
                )
                await state.set_state(ClientState.START)
                db.del_auction(chatid)
                for member in members_id:
                    if not member == "" and not int(member) == author_id:
                        await bot.send_message(
                            int(member),
                            "–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è‚åõÔ∏è",
                            reply_markup=nav.del_auction,
                        )
            except Exception as e:
                print(e)
                await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
        elif "detail" in call.data:
            await bot.delete_message(chat_id=chatid, message_id=call.message.message_id)
            auction = db.get_auction(int(call.data[7:]))
            await bot.send_message(
                chatid,
                f'–ê—É–∫—Ü–∏–æ–Ω: ‚Ññ{auction[0]}\nüì¶–¢–æ–≤–∞—Ä: {auction[4]}\n{"üíµ–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞" if auction[6] == "inactive" else "üí≤–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞"} : {auction[2] if auction[6] == "inactive" else auction[5]}\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {auction[1]}\nüì¢–°—Ç–∞—Ç—É—Å: {auction[6]} ',
                reply_markup=nav.get_auction_offer(auction[3]),
            )
    except Exception as e:
        print(e, call.data)
        await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
