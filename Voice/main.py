from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from moviepy.editor import *

import config as cfg
import markups as nav
from filesMass import voices, circles, pictures

storage = MemoryStorage()
bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=storage)


class ClientState(StatesGroup):
    START = State()
    SEARCH = State()
    VIDEO_CONVERT = State()


def find_voice_desc(name, category, mass):
    searching_mass = mass[category] if category != "circles" else mass
    for audio in searching_mass:
        if audio[1] == name:
            return audio[0]


async def checkMember(
    userid,
):
    # chat_member = await bot.get_chat_member(cfg.required_chat_id, userid)
    # if chat_member.status == "left":
    #     return False
    return True


async def delete_msg(message, count):
    for i in range(count):
        try:
            await bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass


@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        if not await checkMember(message.chat.id):
            await bot.send_message(
                message.chat.id,
                f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                reply_markup=nav.channel_url,
            )
            await state.set_state(ClientState.START)
            return
        await delete_msg(message, 1)
        await bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {message.from_user.first_name}!üôã\n\nüë±üèª‚Äç‚ôÄÔ∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç - <b>—É–¥–æ–±–Ω–æ–µ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ </b>–ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–º–æ–Ω—Ç–æ–≤ –ø—É—Ç–µ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\nüéô<b>–í–Ω—É—Ç—Ä–∏ –≤–∞—Å –∂–¥–µ—Ç –±–æ–ª–µ–µ 600 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è 8 —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–æ—Ä–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç—ã.</b> \n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏</a>",
            parse_mode="html",
            disable_web_page_preview=True,
            reply_markup=nav.start_menu,
        )
        await state.update_data(username=message.from_user.first_name)
        await state.set_state(ClientState.START)


@dp.message_handler(content_types=["text"], state=ClientState.all_states)
async def textMessages(message: types.Message, state: FSMContext):
    chatid = message.chat.id
    msg = await bot.send_message(chatid, "–¢–∏–ø–æ –∫—É–±–æ–∫", reply_markup=nav.menu_hide)
    await delete_msg(msg, 1)
    await delete_msg(message, 2)
    if message.text == "–ì–æ–ª–æ—Å–æ–≤—ã–µüéô":
        photo = open("files/set/voice.jpg", "rb")
        await bot.send_photo(
            chatid,
            parse_mode="HTML",
            photo=photo,
            caption="üôãüèº‚Äç‚ôÄÔ∏è –ù–∏–∂–µ –¥–ª—è –≤–∞—Å –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –±–æ–ª–µ–µ <b>—à–µ—Å—Ç–∏ —Å–æ—Ç–µ–Ω –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b> <i>–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º–∏ –º–∞–º–æ–Ω—Ç–∞–º–∏</i>, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ <b>—Ä–∞–±–æ—Ç–Ω–∏—Ü–∞–º–∏ –Ω–∞—à–µ–π –≤–µ—Ç–∫–∏</b> –ø—Ä–æ–µ–∫—Ç–æ–≤ <i>—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å</i> –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –≤–æ—Ä–∫–∞.\n\n‚ö°Ô∏è –ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
            reply_markup=nav.categor_choose,
        )
        await state.set_state(ClientState.START)
    elif message.text == "–ö—Ä—É–∂–∫–∏üîò":
        photo = open("files/set/video.jpg", "rb")
        await bot.send_photo(
            chatid,
            parse_mode="HTML",
            photo=photo,
            caption="üôãüèº‚Äç‚ôÄÔ∏è –ù–∏–∂–µ –¥–ª—è –≤–∞—Å –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã <i>–ø–µ—Ä–≤—ã–µ –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ</i> <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è</b> <i>–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º–∏ –º–∞–º–æ–Ω—Ç–∞–º–∏</i>, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ <b>—Ä–∞–±–æ—Ç–Ω–∏—Ü–∞–º–∏ –Ω–∞—à–µ–π –≤–µ—Ç–∫–∏</b> –ø—Ä–æ–µ–∫—Ç–æ–≤ <i>—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å</i>.\n\n‚ö°Ô∏è <b>–ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!</b>",
            reply_markup=nav.get_category_page("circles", 0, 0, "no"),
        )
    elif message.text == "–§–æ—Ç–æüñº":
        photo = open("files/set/pic.png", "rb")
        await bot.send_photo(
            chatid,
            parse_mode="HTML",
            photo=photo,
            caption="üôãüèº‚Äç‚ôÄÔ∏è –ù–∏–∂–µ –¥–ª—è –≤–∞—Å –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω <b>—Å–±–æ—Ä–Ω–∏–∫ –∏–∑ –±–æ–ª–µ–µ –¥–≤—É—Ö —Å–æ—Ç–µ–Ω —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b> –¥–ª—è <i>—Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º–∏ –º–∞–º–æ–Ω—Ç–∞–º–∏</i>, —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n <b>‚ö°Ô∏è –ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!</b>",
            reply_markup=nav.get_category_page("pictures", 0, 0, "no"),
        )
    elif message.text == "–ö—Ä—É–∂–æ–∫ –∏–∑ –≤–∏–¥–µ–æüîß":
        photo = open("files/set/reb.png", "rb")
        await bot.send_photo(
            chatid,
            parse_mode="HTML",
            photo=photo,
            caption="üìπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à–µ –≤–∏–¥–µ–æ</b>, –∏ –º—ã <b>—Å–¥–µ–ª–∞–µ–º –∏–∑ –Ω–µ–≥–æ –∫—Ä—É–∂–æ–∫.</b> \n\n‚ùóÔ∏è—Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –Ω–µ –±–æ–ª–µ–µ 20 –º–±, –∞ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã</b> (<i>–∏–Ω–∞—á–µ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>)",
            reply_markup=nav.back_to_menu,
        )
        await state.set_state(ClientState.VIDEO_CONVERT)


@dp.callback_query_handler(state=ClientState.all_states)
async def callback(call: types.CallbackQuery, state: FSMContext):
    chatid = call.message.chat.id
    messageid = call.message.message_id
    await bot.answer_callback_query(callback_query_id=call.id)
    if call.data == "check_member":
        if await checkMember(chatid):
            await bot.delete_message(chatid, call.message.message_id)
            await bot.send_message(
                chatid,
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {call.message.from_user.first_name}!üôã\n\nüë±üèª‚Äç‚ôÄÔ∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç - <b>—É–¥–æ–±–Ω–æ–µ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ </b>–ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–º–æ–Ω—Ç–æ–≤ –ø—É—Ç–µ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\nüéô<b>–í–Ω—É—Ç—Ä–∏ –≤–∞—Å –∂–¥–µ—Ç –±–æ–ª–µ–µ 600 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è 8 —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤–æ—Ä–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∞–º —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç—ã.</b> \n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏]</a>",
                parse_mode="html",
                disable_web_page_preview=True,
            )
            await bot.send_message(
                chatid,
                "üé§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
                parse_mode="html",
                reply_markup=nav.categor_choose,
            )
    elif call.data.startswith("cat_"):
        choosed_category = call.data[4:]
        await bot.delete_message(chat_id=chatid, message_id=call.message.message_id)
        photo = open(f"files/set/{choosed_category}.jpg", "rb")
        await bot.send_photo(
            chat_id=call.message.chat.id,
            parse_mode="HTML",
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µüìã",
            reply_markup=nav.get_category_page(choosed_category, 0, 0, "no"),
        )
    elif call.data.startswith("page"):
        data_split = call.data.split()
        choosed_category = data_split[2]
        page = int(data_split[1])
        markup = (
            nav.get_category_page(choosed_category, page, 0, "no")
            if data_split[3] == "normal"
            else nav.get_search_markup(choosed_category, data_split[3], page)
        )
        try:
            await bot.edit_message_reply_markup(
                chatid,
                call.message.message_id,
                call.message.message_id,
                reply_markup=markup,
            )
        except:
            pass
    elif call.data == "back":
        state_data = await state.get_data()
        await delete_msg(call.message, 1)
        await bot.send_message(
            chat_id=chatid,
            parse_mode="html",
            text=f"üé§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>",
            reply_markup=nav.categor_choose,
        )
    elif "hide_photos" in call.data:
        await delete_msg(call.message, int(call.data.split("_")[2]) + 1)
    elif call.data == "back_to_menu":
        await delete_msg(call.message, 2)
        await bot.send_message(chatid, "üèÜ", reply_markup=nav.start_menu)
        await state.set_state(ClientState.START)
    elif call.data == "back_to_girl_choose":
        await bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤—É—à–∫—Éüë±‚Äç‚ôÄÔ∏è",
            chatid,
            messageid,
            reply_markup=nav.get_category_page("pictures", 0, 0, "no"),
        )
    elif "search" in call.data:
        await bot.delete_message(chatid, call.message.message_id)
        await bot.send_message(
            chatid,
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø–æ–∏—Å–∫–∞‚úèÔ∏è",
            reply_markup=nav.back_to_files,
        )
        await state.update_data(category=call.data[7:])
        await state.set_state(ClientState.SEARCH)
    elif call.data == "choose":
        await bot.delete_message(chatid, call.message.message_id)
        state_data = await state.get_data()
        category = state_data["category"]
        await bot.send_message(
            chatid,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ªüìã",
            reply_markup=nav.get_category_page(category, 0, 0, "no"),
        )
        await state.set_state(ClientState.START)
    elif call.data == "hide_voice":
        await bot.delete_message(chatid, call.message.message_id)
        await bot.delete_message(chatid, call.message.message_id - 1)
    elif not call.data == "aboba":
        try:
            data_split = call.data.split("/")
            if data_split[0] == "circles" or data_split[0] == "pictures":
                dir_path = f"files/{data_split[0]}/{data_split[1]}.{'mp4' if data_split[0] == 'circles' else 'jpg'}"
            else:
                dir_path = f"files/voices/{data_split[0]}/{data_split[1]}.ogg"
            if data_split[0] != "pictures":
                with open(dir_path, "rb") as open_file:
                    if data_split[0] == "circles":
                        await bot.send_message(
                            chatid,
                            find_voice_desc(data_split[1], data_split[0], circles),
                        )
                        await bot.send_video_note(
                            chatid,
                            open_file,
                            reply_markup=nav.msg_desc_hide,
                        )
                    else:
                        await bot.send_message(
                            chatid,
                            find_voice_desc(data_split[1], data_split[0], voices),
                        )
                        await bot.send_audio(
                            chat_id=chatid,
                            audio=open_file,
                            reply_markup=nav.msg_desc_hide,
                        )
            else:
                photos_names = pictures[data_split[1]]
                photos = []
                for name in photos_names:
                    photos.append(
                        types.InputMediaPhoto(
                            types.InputFile(f"files/pictures/{name}.jpg"),
                        )
                    )
                await bot.send_media_group(
                    chatid,
                    photos,
                )
                await bot.send_message(
                    chatid,
                    f"–î–µ–≤—É—à–∫–∞ {data_split[1]}",
                    reply_markup=nav.girl_photos_actions(len(photos_names)),
                )
        except Exception as e:
            print(e)
            await bot.send_message(chatid, "–≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω‚õîÔ∏è")


@dp.message_handler(state=ClientState.SEARCH)
async def Search(message: types.Message, state: FSMContext):
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await bot.delete_message(message.chat.id, message.message_id)
    key = message.text
    state_data = await state.get_data()
    category = state_data["category"]
    if not nav.get_search_markup(category, key, 0):
        await bot.send_message(
            message.chat.id,
            "–ö —Å–æ–∂–∞–¥–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüò•",
            reply_markup=nav.back_to_files,
        )
        return
    await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ªüìã",
        reply_markup=nav.get_search_markup(category, key, 0),
    )


@dp.message_handler(state=ClientState.VIDEO_CONVERT, content_types=["video"])
async def videoToCircle(message: types.Message, state: FSMContext):
    chatid = message.chat.id
    file_info = await bot.get_file(message.video.file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    with open("source.mp4", "wb") as new_file:
        new_file.write(downloaded_file.getvalue())
    clip = VideoFileClip("source.mp4")
    clip = clip.subclip(0, min(clip.duration, 60))
    fl_size = min(clip.size + tuple([630]))
    final_clip = CompositeVideoClip(
        [clip.set_position(("center"))],
        size=(fl_size, fl_size),
    )
    final_clip.write_videofile(r"cropped_video.mp4", logger=None)
    with open("cropped_video.mp4", "rb") as circle:
        await bot.send_video_note(chatid, circle, reply_markup=nav.msg_desc_hide)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
