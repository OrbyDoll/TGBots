import math
import time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import pathlib
import sys
import config as cfg
import markups as nav
from dbshka import Database
from garantDB import GarantDB

storage = MemoryStorage()
bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=storage)
script_dir = pathlib.Path(sys.argv[0]).parent
db = Database(script_dir / cfg.db_file)
garantDB = GarantDB(script_dir / cfg.garantDB_file)


class ClientState(StatesGroup):
    START = State()
    CREATEOFFER_CATEGORY = State()
    CREATEOFFER_NAME = State()
    CREATEOFFER_PRICE = State()
    CHOOSESORTTYPE = State()
    CHOOSEPRODUCT_CATEGORY = State()
    DELETEPRODUCT_CATEGORY = State()
    CHANGEPRICE = State()
    DESCRIBEDENY = State()
    ADMINDELETE = State()
    BAN = State()
    # UNBAN = State()
    BALANCE_USER = State()
    BALANCE_SUMM = State()
    NEWSLETTER = State()
    SORT = State()


async def delete_msg(message, count):
    for i in range(count):
        try:
            await bot.delete_message(message.chat.id, message.message_id - i)
        except:
            pass


def checkAvailability(text):
    if "_" in text or "/" in text:
        return False
    return True


async def checkMember(
    userid,
):
    chat_member = await bot.get_chat_member(cfg.required_chat_id, userid)
    if chat_member.status == "left":
        return False
    return True


def check_category(category):
    category_mass = [
        "–¢–µ–≥–∏",
        "–î–µ—Ñ",
        "–£—Å–ª—É–≥–∏",
        "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "–°–æ—Ñ—Ç",
        "–ë–æ—Ç—ã",
        "–°–∞–π—Ç—ã",
        "–ú–∞–Ω—É–∞–ª—ã",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã",
        "–î—Ä—É–≥–æ–µ",
    ]
    for categ in category_mass:
        if categ == category:
            return True
    return False


def sortOffers(mass: list, increase):
    if increase == "increase":
        mass.sort(key=lambda x: int(x.split("_")[2]), reverse=True)
    elif increase == "decrease":
        mass.sort(key=lambda x: int(x.split("_")[2]))
    return mass


db.create_tables()


@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    try:
        if message.chat.type == "private":
            await state.update_data(username=message.from_user.username)
            await state.set_state(ClientState.START)
            if not await checkMember(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
                    reply_markup=nav.channel_url,
                )
                await state.set_state(ClientState.START)
                return      
            print(message)
            if not garantDB.user_exists(message.chat.id):
                await bot.send_message(
                    message.chat.id,
                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–µüíé",
                    reply_markup=nav.garant_check
                )
                return
            elif garantDB.check_ban(message.chat.id) == "1":
                await bot.send_message(
                    message.chat.id, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                )
                return
            balance = garantDB.get_balance(message.chat.id)[0]
            if not db.user_exists(message.chat.id):
                db.add_user(message.chat.id, float(balance), message.from_user.username)
            db.set_balance(message.chat.id, float(balance))
            await bot.send_message(
                message.chat.id,
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{message.from_user.username}!üôã\n\nü´Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —Ä—ã–Ω–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —É—Å–ª—É–≥–∞–º.\n\nüìà<a href='https://t.me/pradamarketplace_bot'> PRADA | MARKETPLACE</a> - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤–æ—Ä–∫–µ—Ä–∞–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã <b>–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –æ–±–æ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nüëâ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∏–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                parse_mode="html",
                disable_web_page_preview=True,
                reply_markup=nav.menu,
            )
    except Exception as e:
        print(e, " start")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(commands=["admin"], state=ClientState.all_states)
async def admin(message: types.Message, state: FSMContext):
    if (
        message.from_user.id == cfg.glav_admin
        or message.from_user.id == cfg.debug_admin
        or message.from_user.id == cfg.admin3
    ):
        await bot.send_message(
            message.chat.id,
            f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, {message.from_user.username}",
            reply_markup=nav.admin_panel,
        )


@dp.callback_query_handler(state=ClientState.all_states)
async def callback_message(call: types.CallbackQuery, state: FSMContext):
    chatid = call.message.chat.id
    await bot.answer_callback_query(callback_query_id=call.id)
    if garantDB.user_exists(chatid):
        if garantDB.check_ban(chatid) == "1":
            await bot.send_message(chatid, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå")
            return
    try:
        if "buy_" in call.data:
            balance = garantDB.get_balance(chatid)[0]
            db.set_balance(chatid, float(balance))
            if int(call.data.split()[1]) == chatid:
                await bot.send_message(chatid, "‚ùå–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä‚ùå")
                await state.set_state(ClientState.START)
                return
            elif int(db.get_user(chatid)[1]) < int(call.data.split()[3]):
                await bot.send_message(
                    chatid,
                    f"‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í–∞—à –±–∞–ª–∞–Ω—Å {db.get_user(chatid)[1]} USDT‚ùå",
                )
                await state.set_state(ClientState.START)
                return
            await state.update_data(seller_id=call.data[4:])
            await bot.send_message(
                chatid,
                "üîî–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä? –ü–æ—Ç–æ–º —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—åüîî",
                reply_markup=nav.buy_choose,
            )
        elif call.data == "newsletter":
            await bot.send_message(
                chatid,
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
            )
            await state.set_state(ClientState.NEWSLETTER)
        elif call.data == "edit_balance":
            await bot.send_message(
                chatid,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–∞–ª–∞–Ω—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
            )
            await state.set_state(ClientState.BALANCE_USER)
        elif call.data == "stats":
            await bot.send_message(
                chatid, db.stats(garantDB.getOffersNumber()), reply_markup=nav.hide
            )
        elif call.data == "bor":
            await bot.send_message(
                chatid, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=nav.bor
            )
        elif call.data == "ban":
            await delete_msg(call.message, 1)
            await bot.send_message(
                chatid,
                "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∏–∫ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ '-' –±–µ–∑ –∫–∞–≤—ã—á–µ–∫",
            )
            await state.set_state(ClientState.BAN)
        elif call.data == "unban":
            await delete_msg(call.message, 1)
            all_banned = garantDB.get_all_banned_users()
            if len(all_banned) == 0:
                await bot.send_message(
                    chatid, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=nav.hide
                )
                return
            for user in all_banned:
                await bot.send_message(
                    chatid,
                    f"–ù–∏–∫: {user[4]}",
                    reply_markup=types.InlineKeyboardMarkup().add(
                        types.InlineKeyboardButton(
                            "–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"unban_{user[0]}"
                        )
                    ),
                )
            await bot.send_message(
                chatid,
                f"–ù–∞–π–¥–µ–Ω–æ {len(all_banned)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                        callback_data=f"hide_users_{len(all_banned)}",
                    )
                ),
            )
        elif "hide_users" in call.data:
            users_count = int(call.data.split("_")[2])
            await delete_msg(call.message, users_count + 1)
        elif "unban" in call.data:
            desired_user = call.data.split("_")[1]
            garantDB.unban(desired_user)
            await bot.edit_message_text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω", chatid, call.message.message_id
            )
        elif call.data == "admin_delete":
            await delete_msg(call.message, 1)
            await bot.send_message(
                chatid,
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
            )
            await state.set_state(ClientState.ADMINDELETE)
        elif call.data == "cancel_admin_del":
            await delete_msg(call.message, 2)
            await state.set_state(ClientState.START)
        elif call.data == "check_products":
            all_products = db.get_all_tempOffers()
            res = True
            for owner_product in all_products:
                owner = owner_product[0]
                for product in owner_product[1].split("/"):
                    if not product == "":
                        res = False
                        product_data = product.split("_")
                        await bot.send_message(
                            chatid,
                            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data[0]}\n–¢–æ–≤–∞—Ä: {product_data[1]}\n–¶–µ–Ω–∞: {product_data[2]}",
                            reply_markup=nav.get_admin_solution_markup(
                                owner, product_data[1]
                            ),
                        )
            if res:
                await bot.send_message(
                    chatid, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", reply_markup=nav.hide
                )
        elif call.data == "accept_buy":
            state_data = await state.get_data()
            buy_link = state_data["seller_id"]
            await bot.edit_message_text(
                chat_id=chatid,
                text=f"üì®–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—à–µ–º—É –≥–∞—Ä–∞–Ω—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏: `{nav.code_link(buy_link.encode())}`üì®",
                message_id=call.message.message_id,
                parse_mode="MARKDOWN",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–∞‚û°Ô∏è",
                        url="https://t.me/pradagarant_bot",
                    )
                ),
            )
            await state.set_state(ClientState.START)
        elif call.data == "deny_buy":
            await bot.delete_message(chatid, call.message.message_id)
            await state.set_state(ClientState.START)
            await bot.send_message(chatid, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüìã", reply_markup=nav.menu)
        elif call.data == "category_back":
            await bot.delete_message(chatid, call.message.message_id)
            photo = open(f"files/VKM.png", "rb")
            await bot.send_photo(               
                chatid,
                photo=photo,
                caption="–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞üìã",
                reply_markup=nav.categor,
            )
            await state.set_state(ClientState.CHOOSEPRODUCT_CATEGORY)
        elif call.data == "back_name":
            await delete_msg(call.message, 4)
            await bot.send_message(chatid, "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=nav.menu)
            await state.set_state(ClientState.START)
        elif call.data == "back_price":
            await delete_msg(call.message, 6)
            await bot.send_message(chatid, "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=nav.menu)
            await state.set_state(ClientState.START)
        elif "service" in call.data:
            await bot.delete_message(chatid, call.message.message_id)
            choosed_service = call.data[8:]
            await bot.send_message(
                chatid,
                nav.prada_service_list[choosed_service]["text"],
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="–ó–∞–∫–∞–∑–∞—Ç—åüõç", callback_data=f"order_{choosed_service}"
                    ),
                    types.InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data="choose"),
                ),
            )
            await state.set_state(ClientState.START)
        elif call.data == "choose":
            await bot.delete_message(chatid, call.message.message_id)
            await bot.send_message(
                chatid, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—Éüìã", reply_markup=nav.service_markup
            )
        elif "order" in call.data:
            choosed_service = call.data[6:]
            await bot.send_message(
                chatid,
                nav.prada_service_list[choosed_service]["contacts"],
                reply_markup=nav.hide,
            )
        elif "hide" in call.data:
            if call.data[-1] == "2":
                await delete_msg(call.message, 2)
            else:
                await delete_msg(call.message, 1)
        elif "del" in call.data:
            offer_str = call.data[4:]
            await bot.edit_message_text(
                "üîî–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å",
                chatid,
                call.message.message_id,
            )
            await bot.edit_message_reply_markup(
                chatid,
                call.message.message_id,
                call.message.message_id,
                types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="–£–¥–∞–ª–∏—Ç—åüóë", callback_data=f"confirm_{offer_str}_yes"
                    ),
                    types.InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞‚õîÔ∏è", callback_data=f"confirm_{offer_str}_no"
                    ),
                ),
            )
        elif call.data == "close_msg":
            state_data = await state.get_data()
            for i in range(state_data["opened_msgs"] + 2):
                await bot.delete_message(chatid, call.message.message_id - i)
        elif call.data == "check_member_channel":
            if await checkMember(chatid):
                await bot.delete_message(chatid, call.message.message_id)
                if not garantDB.user_exists(call.message.chat.id):
                    await bot.send_message(
                        call.message.chat.id,
                        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –≤ –Ω–∞—à–µ–º –≥–∞—Ä–∞–Ω—Ç –±–æ—Ç–µüíé",
                        reply_markup=nav.garant_check,
                    )
                    return
                elif garantDB.check_ban(chatid) == "1":
                    await bot.send_message(
                        chatid, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                    )
                    return
                state_data = await state.get_data()
                username = state_data["username"]
                await bot.send_message(
                    chatid,
                    f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{username}!üôã\n\nü´Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —Ä—ã–Ω–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —É—Å–ª—É–≥–∞–º.\n\nüìà PRADA | MARKETPLACE (https://t.me/pradamarketplace_bot) - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤–æ—Ä–∫–µ—Ä–∞–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã <b>–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –æ–±–æ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nüëâ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∞–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                    parse_mode="html",
                    disable_web_page_preview=True,
                    reply_markup=nav.menu,
                )
                balance = garantDB.get_balance(call.message.chat.id)[0]
                if not db.user_exists(call.message.chat.id):
                    db.add_user(call.message.chat.id, float(balance), username)
                db.set_balance(call.message.chat.id, float(balance))
        elif call.data == "check_member_garant":
            if garantDB.user_exists(call.message.chat.id):
                await bot.delete_message(chatid, call.message.message_id)
                if garantDB.check_ban(chatid) == "1":
                    await bot.send_message(
                        chatid, "‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚ùå"
                    )
                    return
                state_data = await state.get_data()
                username = state_data["username"]
                await bot.send_message(
                    chatid,
                    f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, @{username}!üôã\n\nü´Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —Ä—ã–Ω–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —É—Å–ª—É–≥–∞–º.\n\nüìà<a href='https://t.me/pradamarketplace_bot'> PRADA | MARKETPLACE</a> - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤–æ—Ä–∫–µ—Ä–∞–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã <b>–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –æ–±–æ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nüëâ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ <b>–≤–∑–∏–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—à–∏–º –≥–∞—Ä–∞–Ω—Ç–æ–º.</b>\n\nüèÜ <a href='https://t.me/PRADAEMPlRE'>PRADA | EMPIRE - —Ä–∞–±–æ—Ç–∞–π —Å –ª—É—á—à–∏–º–∏!</a>",
                    parse_mode="html",
                    disable_web_page_preview=True,
                    reply_markup=nav.menu,
                )
                balance = garantDB.get_balance(call.message.chat.id)[0]
                if not db.user_exists(call.message.chat.id):
                    db.add_user(call.message.chat.id, float(balance), username)
                db.set_balance(call.message.chat.id, float(balance))
        elif "confirm" in call.data:
            data_split = call.data.split("_")
            offer_data = data_split[1].split("/")
            if data_split[2] == "no":
                await bot.edit_message_text(
                    f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {offer_data[0]}\nüì¶–¢–æ–≤–∞—Ä: {offer_data[1]}\nüí≤–¶–µ–Ω–∞: {offer_data[2]} USDT",
                    chatid,
                    call.message.message_id,
                )
                await bot.edit_message_reply_markup(
                    chatid,
                    call.message.message_id,
                    call.message.message_id,
                    nav.get_offer_del_button(data_split[1], 1),
                )
                return
            if len(offer_data) == 4:
                chatid = offer_data[3]
                offer_data.pop(3)
            db.del_offer_products(chatid, offer_data)
            await bot.edit_message_text(
                "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω‚úîÔ∏è",
                call.message.chat.id,
                call.message.message_id,
            )
        elif "cp" in call.data:
            offer_str = call.data.split("_")[1]
            await bot.send_message(chatid, "üìù–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É")
            await state.update_data(
                changeprice_dict={
                    "offer_str": offer_str,
                    "message_id": call.message.message_id,
                }
            )
            await state.set_state(ClientState.CHANGEPRICE)
        elif "ap" in call.data:
            add_info = call.data[3:].split("_")
            user_temps = db.get_user_tempOffers(add_info[0])[0].split("/")
            user_temps.pop(0)
            for temp_product in user_temps:
                temp_data = temp_product.split("_")
                if temp_data[1] == add_info[1]:
                    db.del_tempOffer_products(add_info[0], temp_data)
                    db.add_offer(add_info[0], temp_data)
                    break
            await bot.delete_message(chatid, call.message.message_id)
            await bot.send_message(
                add_info[0],
                "–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞‚úîÔ∏è",
                reply_markup=nav.hide,
            )
        elif "dp" in call.data:
            product_owner_id = call.data[3:].split("_")[0]
            await state.update_data(product_owner_id=product_owner_id)
            await state.update_data(product_name_del=call.data[3:].split("_")[1])
            await bot.delete_message(chatid, call.message.message_id)
            await bot.send_message(chatid, "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞")
            await state.set_state(ClientState.DESCRIBEDENY)
        # elif "sort" in call.data:
        # try:
        #     state_data = await state.get_data()
        #     choosed_category = state_data["choosed_category"]
        #     all_offers = db.get_all_offers()
        #     res = False
        #     for user_offers in all_offers:
        #         owner_id = user_offers[0]
        #         user_offers_list = sortOffers(
        #             user_offers[1].split("/"), call.data[5:]
        #         )
        #         for offer in user_offers_list:
        #             if not offer == "":
        #                 offer_list = offer.split("_")
        #                 product_category = offer_list[0]
        #                 product_name = offer_list[1]
        #                 product_price = offer_list[2]
        #                 buy_link = f"offer {owner_id} {chatid} {product_price} m"
        #                 if choosed_category == product_category:
        #                     res = True
        #                     await bot.send_message(
        #                         chatid,
        #                         f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category}\nüì¶–¢–æ–≤–∞—Ä: {product_name}\n–ê–≤—Ç–æ—Ä: {owner_id}\nüí≤–¶–µ–Ω–∞: {product_price} USDT",
        #                         reply_markup=nav.get_offer_buy_button(buy_link),
        #                     )
        #     if not res:
        #         await bot.send_message(
        #             chatid,
        #             "–¢–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ‚ùå.",
        #             reply_markup=nav.menu,
        #         )
        #     else:
        #         await bot.send_message(chatid, "üèÜ", reply_markup=nav.menu)
        #     await state.set_state(ClientState.START)
        # except Exception as e:
        #     print(e, " sort")
        #     print(e.args)
        #     await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")
    except Exception as e:
        print(e, " callback ", call.data)
        await bot.send_message(chatid, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.NEWSLETTER)
async def balanceUser(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        info = db.get_all_users()
        await bot.send_message(message.chat.id, text="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!")
        for i in range(len(info)):
            try:
                time.sleep(1)
                await bot.send_message(info[i][0], str(message.text))
            except:
                pass
        await bot.send_message(message.chat.id, text="‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " newsletter")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.BALANCE_USER)
async def balanceUser(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        user = db.get_user_from_nick(message.text)
        if user == None:
            await bot.send_message(
                message.chat.id,
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã',
            )
            return
        await state.update_data(edit_balance_user=user)
        await bot.send_message(
            message.chat.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]}\n–ë–∞–ª–∞–Ω—Å: {user[1]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        )
        await state.set_state(ClientState.BALANCE_SUMM)
    except Exception as e:
        print(e, " balance user")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.BALANCE_SUMM)
async def balanceSumm(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        try:
            new_balance = int(message.text)
        except:
            await bot.send_message(
                message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã'
            )
            return
        state_data = await state.get_data()
        user = state_data["edit_balance_user"]
        db.set_balance(user[0], new_balance)
        garantDB.set_balance(user[0], new_balance)
        await bot.send_message(
            message.chat.id, "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=nav.hide
        )
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " balance summ")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.BAN)
async def ban(message: types.Message, state: FSMContext):
    try:
        await delete_msg(message, 2)
        if message.text == "-":
            await state.set_state(ClientState.START)
            return
        user = db.get_user_from_nick(message.text)
        if user == None:
            await bot.send_message(
                message.chat.id,
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã',
            )
            return
        garantDB.ban(user[0])
        await bot.send_message(
            message.chat.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} –∑–∞–±–∞–Ω–µ–Ω.",
            reply_markup=nav.hide,
        )
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " ban")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


# @dp.message_handler(state=ClientState.UNBAN)
# async def ban(message: types.Message, state: FSMContext):
#     try:
#         await delete_msg(message, 2)
#         if message.text == "-":
#             await state.set_state(ClientState.START)
#             return
#         user = db.get_user_from_nick(message.text)
#         if user == None:
#             await bot.send_message(
#                 message.chat.id,
#                 '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "-" –¥–ª—è –æ—Ç–º–µ–Ω—ã',
#             )
#             return
#         garantDB.unban(user[0])
#         await bot.send_message(
#             message.chat.id,
#             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} —Ä–∞–∑–±–∞–Ω–µ–Ω.",
#             reply_markup=nav.hide,
#         )
#         await state.set_state(ClientState.START)
#     except Exception as e:
#         print(e, " unban")
#         await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.DESCRIBEDENY)
async def describeDeny(message: types.Message, state: FSMContext):
    try:
        describe = message.text
        state_data = await state.get_data()
        product_owner_id = state_data["product_owner_id"]
        product_name = state_data["product_name_del"]
        user_temps = db.get_user_tempOffers(product_owner_id)[0].split("/")
        user_temps.pop(0)
        for temp_product in user_temps:
            temp_data = temp_product.split("_")
            if temp_data[1] == product_name:
                db.del_tempOffer_products(product_owner_id, temp_data)
                break
        await bot.send_message(
            product_owner_id,
            f"–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n{describe}",
            reply_markup=nav.hide,
        )
        await delete_msg(message, 2)
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, " describe deny")
        await bot.send_message(cfg.glav_admin, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.ADMINDELETE)
async def adminDelete(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)
        user_info = db.get_user_from_nick(message.text)
        if user_info == None:
            await bot.send_message(
                message.chat.id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=nav.cancel_admin_del,
            )
            return
        userid = user_info[0]
        if db.get_user_offers(userid) == None:
            await bot.send_message(
                message.chat.id,
                "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=nav.cancel_admin_del,
            )
            return
        elif db.get_user_offers(userid)[0] == "":
            await bot.send_message(
                message.chat.id,
                "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=nav.cancel_admin_del,
            )
            return
        user_offers = db.get_user_offers(userid)[0].split("/")
        await state.update_data(opened_msgs=len(user_offers) - 1)
        for offer in user_offers:
            if not offer == "":
                offer_list = offer.split("_")
                product_category = offer_list[0]
                product_name = offer_list[1]
                product_price = offer_list[2]
                del_link = f"{product_category}/{product_name}/{product_price}/{userid}"
                await bot.send_message(
                    message.chat.id,
                    f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category}\nüì¶–¢–æ–≤–∞—Ä: {product_name}\nüí≤–¶–µ–Ω–∞: {product_price} USDT",
                    reply_markup=nav.get_offer_del_button(del_link, 0),
                )
        await bot.send_message(
            message.chat.id,
            "üèÜ",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text="–°–∫—Ä—ã—Ç—å‚¨ÜÔ∏è", callback_data="close_msg")
            ),
        )
        await state.set_state(ClientState.START)

    except Exception as e:
        print(e, " admin delete")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CHANGEPRICE)
async def changePrice(message: types.Message, state: FSMContext):
    try:
        try:
            new_price = int(message.text)
        except:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ‚õîÔ∏è")
            return
        state_data = await state.get_data()
        product_data = state_data["changeprice_dict"]["offer_str"].split("/")
        message_id = state_data["changeprice_dict"]["message_id"]
        await bot.edit_message_text(
            f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data[0]}\nüì¶–¢–æ–≤–∞—Ä: {product_data[1]}\nüí≤–¶–µ–Ω–∞: {new_price} USDT",
            message.chat.id,
            message_id,
        )
        await bot.edit_message_reply_markup(
            message.chat.id,
            message_id,
            message_id,
            nav.get_offer_del_button(state_data["changeprice_dict"]["offer_str"], 1),
        )
        db.update_price(
            message.chat.id, state_data["changeprice_dict"]["offer_str"], new_price
        )
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e, "change price")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CHOOSEPRODUCT_CATEGORY)
async def chooseProduct(message: types.Message, state: FSMContext):
    try:
        chatid = message.chat.id
        if message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
            await delete_msg(message, 3)
            await bot.send_message(message.chat.id, "üèÜ", reply_markup=nav.menu)
            await state.set_state(ClientState.START)
            return
        elif message.text == "PRADAüèÜ":
            await bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É",
                reply_markup=nav.service_markup,
            )
            return
        choosed_category = message.text[:-1]
        photo = open(f"files/{choosed_category}.png", "rb")
        await bot.send_photo(
            chatid,
            photo=photo,
        )
        await state.update_data(choosed_category=message.text[:-1])
        all_offers = db.get_all_offers()
        msgs = []
        text_for_sort = []
        res = False
        for user_offers in all_offers:
            owner_id = user_offers[0]
            user_offers_list = user_offers[1].split("/")
            for offer in user_offers_list:
                if not offer == "":
                    offer_list = offer.split("_")
                    product_category = offer_list[0]
                    product_name = offer_list[1]
                    product_price = offer_list[2]
                    buy_link = f"offer {owner_id} {chatid} {product_price} m"
                    if choosed_category == product_category:
                        res = True
                        msg = await bot.send_message(
                            chatid,
                            f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category}\nüì¶–¢–æ–≤–∞—Ä: {product_name}\n–ê–≤—Ç–æ—Ä: {owner_id}\nüí≤–¶–µ–Ω–∞: {product_price} USDT",
                            reply_markup=nav.get_offer_buy_button(buy_link),
                        )
                        text_for_sort.append(f"{offer}_{owner_id}")
                        msgs.append(msg)
        if not res:
            await bot.send_message(
                chatid,
                "–¢–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ‚ùå.",
                reply_markup=nav.menu,
            )
            await state.set_state(ClientState.START)
        else:
            await state.update_data(msgs=msgs)
            await state.update_data(text_for_sort=text_for_sort)
            await bot.send_message(chatid, "üèÜ", reply_markup=nav.sort_choose)
            await state.set_state(ClientState.SORT)

        # await bot.send_message(
        #     message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", reply_markup=nav.sort_choose
        # )
        # await state.set_state(ClientState.START)
    except Exception as e:
        print(e)
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.SORT)
async def setAuctionCategory(message: types.Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        messages = state_data["msgs"]
        if message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
            await delete_msg(message, 1)
            for msg in messages:
                await delete_msg(msg, 1)
            await bot.send_message(
                message.chat.id, "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=nav.menu
            )
            await state.set_state(ClientState.START)
        elif message.text == "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µüìà" or message.text == "–°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µüìâ":
            await delete_msg(message, 1)
            if message.text == "–°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µüìà":
                sort_type = "increase"
            else:
                sort_type = "decrease"
            for msg in messages:
                await delete_msg(msg, 1)
            msgs = []
            choosed_category = state_data["choosed_category"]
            unsorted_list = state_data["text_for_sort"]
            user_offers_list = sortOffers(unsorted_list, sort_type)
            for offer in user_offers_list:
                offer_list = offer.split("_")
                product_category = offer_list[0]
                product_name = offer_list[1]
                product_price = offer_list[2]
                owner_id = offer_list[3]
                buy_link = f"offer {owner_id} {message.chat.id} {product_price} m"
                if choosed_category == product_category:
                    msg = await bot.send_message(
                        message.chat.id,
                        f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category}\nüì¶–¢–æ–≤–∞—Ä: {product_name}\n–ê–≤—Ç–æ—Ä: {owner_id}\nüí≤–¶–µ–Ω–∞: {product_price} USDT",
                        reply_markup=nav.get_offer_buy_button(buy_link),
                    )
                    msgs.append(msg)
            await state.update_data(msgs=msgs)
    except Exception as e:
        print(e, "get auctions")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CREATEOFFER_CATEGORY)
async def createOffer(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.send_message(message.chat.id, "üèÜ", reply_markup=nav.menu)
            await state.set_state(ClientState.START)
            return
        elif not check_category(message.text[:-1]):
            photo = open(f"files/VKM.png", "rb")
            await bot.send_photo(               
                message.chatid,
                photo=photo,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–πüìã",
                reply_markup=nav.categor_without_prada,
            )
            return
        await state.update_data(product_category=message.text[:-1])
        await bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞‚úèÔ∏è",
            reply_markup=nav.back_from_name,
        )
        await state.set_state(ClientState.CREATEOFFER_NAME)
    except Exception as e:
        print(e, " create offer 2")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CREATEOFFER_NAME)
async def createOffer(message: types.Message, state: FSMContext):
    try:
        if not checkAvailability(message.text):
            await bot.send_message(
                message.chat.id,
                '–°–∏–º–≤–æ–ª—ã "_" "/" –∑–∞–ø—Ä–µ—à–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞.',
            )
            return
        await state.update_data(product_name=message.text)
        await bot.send_message(
            message.chat.id,
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ USDTüí≤",
            reply_markup=nav.back_from_price,
        )
        await state.set_state(ClientState.CREATEOFFER_PRICE)
    except Exception as e:
        print(e, " create offer 3")
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(state=ClientState.CREATEOFFER_PRICE)
async def createOffer(message: types.Message, state: FSMContext):
    try:
        if db.get_user_offers(message.chat.id) == None:
            db.insert_offer_owner(message.chat.id)
        if db.get_user_tempOffers(message.chat.id) == None:
            db.insert_owner_temp(message.chat.id)
        try:
            product_price = int(message.text)
            product_price = str(product_price)
        except:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ‚õîÔ∏è")
            return
        await delete_msg(message, 7)
        state_data = await state.get_data()
        product_category = state_data["product_category"]
        product_name = state_data["product_name"]
        add_link = (
            f"{message.chat.id}_{product_category}_{product_name}_{product_price}"
        )
        await bot.send_message(message.chat.id, "–í–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é", reply_markup=nav.menu)
        await bot.send_message(
            message.chat.id,
            "–í–∞—à —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç.",
            reply_markup=nav.hide,
        )
        db.add_tempOffer(
            message.chat.id, [product_category, product_name, product_price]
        )
        await state.set_state(ClientState.START)
    except Exception as e:
        print(e)
        await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


@dp.message_handler(content_types=["text"], state=ClientState.all_states)
async def textHandler(message: types.Message, state: FSMContext):
    chatid = message.chat.id
    if not await checkMember(message.chat.id):
        await bot.send_message(
            message.chat.id,
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!",
            reply_markup=nav.channel_url,
        )
        await state.set_state(ClientState.START)
        return
    if garantDB.check_ban(chatid) == "1":
        await bot.send_message(chatid, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É‚õîÔ∏è")
        return
    if message.text == "–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Äüìù":
        try:
            if (
                len(db.get_user_offers(chatid)[0].split("/"))
                + len(db.get_user_tempOffers(chatid)[0].split("/"))
                > 7
            ):
                await bot.send_message(
                    chatid,
                    f"–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 7‚õîÔ∏è\n–£ –≤–∞—Å {len(db.get_user_offers(chatid)[0].split('/'))} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏ {len(db.get_user_tempOffers(chatid)[0])} —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
                )
                return
        except:
            pass
        photo = open(f"files/VKM.png", "rb")
        await bot.send_photo(               
            chatid,
            photo=photo,
            caption="–ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –≤–∞—à —Ç–æ–≤–∞—Ä?üì¶",
            reply_markup=nav.categor_without_prada,
        )
        await state.set_state(ClientState.CREATEOFFER_CATEGORY)
    elif message.text == "–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Äüìã":
        photo = open(f"files/VKM.png", "rb")
        await bot.send_photo(               
            chatid,
            photo=photo,
            caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüíº", reply_markup=nav.categor)
        await state.set_state(ClientState.CHOOSEPRODUCT_CATEGORY)
    elif message.text == "–û –Ω–∞—Åüåü":
        deals_number = garantDB.getOffersNumber()
        gm_deals_number = deals_number["g-m"]
        a_deals_number = deals_number["a"]
        deals_summ = garantDB.getOffersSumm()
        gm_deals_summ = math.ceil(deals_summ["g-m"])
        a_deals_summ = math.ceil(deals_summ["a"])
        photo = open(f"files/AUM.png", "rb")
        await bot.send_photo(               
            chatid,
            photo=photo,
            caption=f"‚ö°Ô∏è<a href='https://t.me/pradamarketplace_bot'>PRADA | MARKETPLACE</a> - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤ —Å–≤–æ–µ–º —Ä–æ–¥–µ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤–æ—Ä–∫–µ—Ä–∞–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã <b>–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏,</b> –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –æ–±–æ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏.\n\nü§ù–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –±–∞–∑–µ <a href='https://t.me/pradagarant_bot'>PRADA | GARANT</a><b> - —Å–∏—Å—Ç–µ–º–µ –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤,</b> –ø–æ–∑–≤–æ–ª—è—é—â–µ–π –≤–∞–º –∑–∞–±—ã—Ç—å –æ–±–æ –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Å–µ—Ç–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è <b>–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ–π/–ø–æ–∫—É–ø–∫–æ–π –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥.</b>\n\nüí†–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ <i>@CryptoBot,</i> —á—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç <b>—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤</b> –∏ –ø–æ–ª–Ω—É—é <b>–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫.</b> \n\nüíµ–í—Å–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫ —Å—á–∏—Ç–∞—é—Ç—Å—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö <b>(USD)</b>, –∞ –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ <b>–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ USDT (TRC20)</b>, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\nü¶æ–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã <b>–≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É </b>- @pradamarketplace_sup. –ú—ã –≤—Å–µ–≥–¥–∞ <b>—Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b> –∏ –≥–æ—Ç–æ–≤—ã <b>—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.</b> \n\n üóì –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - <b>12.10.2023. </b>",
            parse_mode="html",
            reply_markup=nav.o_nas,
        )
    elif message.text == "–ú–æ–∏ —Ç–æ–≤–∞—Ä—ãüõç":
        try:
            if db.get_user_offers(chatid) == None:
                await bot.send_message(chatid, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π‚ùå")
                return
            elif db.get_user_offers(chatid)[0] == "":
                await bot.send_message(chatid, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π‚ùå")
                return
            user_offers = db.get_user_offers(message.chat.id)[0].split("/")
            await state.update_data(opened_msgs=len(user_offers) - 1)
            for offer in user_offers:
                if not offer == "":
                    offer_list = offer.split("_")
                    product_category = offer_list[0]
                    product_name = offer_list[1]
                    product_price = offer_list[2]
                    del_link = f"{product_category}/{product_name}/{product_price}"
                    await bot.send_message(
                        message.chat.id,
                        f"üíº–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_category}\nüì¶–¢–æ–≤–∞—Ä: {product_name}\nüí≤–¶–µ–Ω–∞: {product_price} USDT",
                        reply_markup=nav.get_offer_del_button(del_link, 1),
                    )
            await bot.send_message(
                message.chat.id,
                "üèÜ",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="–°–∫—Ä—ã—Ç—å‚¨ÜÔ∏è", callback_data="close_msg"
                    )
                ),
            )
        except Exception as e:
            print(e, " my products ")
            await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õîÔ∏è")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
